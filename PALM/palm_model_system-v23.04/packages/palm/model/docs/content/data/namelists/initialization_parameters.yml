---
# This is the YAML Database file for all allowed parameters within the namelist "initialization_parameters"

advanced_div_correction:
  category: Numerics
  type: L
  default:
    value: .F.
  description:
    short: Parameter to enable an improved divergence correction method for the fifth-order scalar advection scheme.
    long: |
        [advanced_div_correction](#initialization_parameters--advanced_div_correction) = *.T.* activates a better divergence correction for scalar transports with the fifth-order advection scheme. This significantly improves the conservation of scalar quantities. The parameter becomes only effective if [scalar_advec](#initialization_parameters--scalar_advec) = *'ws-scheme'* and requires [loop_optimization](#initialization_parameters--loop_optimization) = *'vector'*.

        The fifth-order Wicker-Skamarock scheme is only conditionally conservative, i.e. scalar conservation is achieved as long as the flow divergence is negligible. For [topography](#initialization_parameters--topography) = *'flat'* this condition is usually guaranteed by the pressure solver. However, in case of [topography](#initialization_parameters--topography) /= *'flat'* with vertical and elevated horizontal surfaces, the divergence that remains after the pressure solver has been called is not negligible any more at fluid grid points located in the vicinity of walls. There is a default removal of divergence errors implemented in the Wicker-Skamarock scheme, which works sufficiently well in most applications. However, for some cases this default correction is not sufficient and scalar is not fully conserved in the near wall regions, leading to changes in the domain mean concentration of a few percent over time. [advanced_div_correction](#initialization_parameters--advanced_div_correction) = *.T.* ensures for a much better conservation of scalar quantities.

        **Note:** <br>
        Tests revealed that the Courant number should not exceed values >= 0.5. Therefore, it is recommended to set [cfl_factor](#initialization_parameters--cfl_factor) < *0.5*. This correction method has still not thoroughly been tested yet for all kind of setups, and numerical instabilities may arise when using it. Please inform the PALM developers, if you experience such kind of issues.


allow_negative_scalar_values:
  category: General Settings
  type: L
  default:
    value: .F.
  description:
    short: Parameter to steer the treatment of negative scalar values.
    long: |
      Due to numerical dispersion errors caused by non-monotone discretization of the advection term, numerical oscillations occur near strong gradients. This sometimes results in negative values of the scalar. By default, scalars are constrained to positive values (>= 0), i.e., in case a negative value appears after time stepping, the scalar value at a respective grid point is reset to *0.1* times the scalar value before the timestep. However, this way, the total scalar amount is not conserved any more and my increase during the simulation. With [allow_negative_scalar_values](#initialization_parameters--allow_negative_scalar_values) = *.T.*, negative scalar values are accepted and the total amount of the scalar in a source/sink-free domain is conserved during the simulation.

      This option only becomes active for scalars that do not interact with the flow, i.e. for passive scalars (see [passive_scalar](#initialization_parameters--passive_scalar)), chemical species, and aerosols. Furthermore, also potential temperature, humidity, cloud-physical quantities, and the SGS-TKE are still constrained to positive values.


allow_roughness_limitation:
  category: General Settings
  type: L
  default:
    value: .F.
  description:
    short: Parameter to define if automatic limitation of roughness lenghts shall be applied.
    long: |
      Application of Monin-Obukhov similarity requires the roughness length $z_0$ to be smaller than the surface layer height $z_{mo}$ (which is assumed as half the grid spacing in normal direction to the respective surface), because otherwise functions like $ ln \frac{z_{mo}}{z_0}$ give wrong results. It is automatically checked if roughness lengths for momentum, temperature, and mositure are $\le 0.5 z_{mo}$ and the run is automatically aborted, if this condition is violated. Setting [allow_roughness_limitation](#initialization_parameters--allow_roughness_limitation) = *.T.* automatically limits the roughness lengths to $0.5 z_{mo}$ and continues the run.


alpha_surface:
  category: Grid
  type: R
  default:
    value: 0.0
  si-unit: degrees
  description:
    short:  Inclination of the model domain with respect to the horizontal.
    long:  |
      A setting of [alpha_surface](#initialization_parameters--alpha_surface) /= *0.0* inclines the model domain along the x-direction with respect to the horizontal. This way, flows over inclined surfaces (e.g. drainage flows, gravity flows) can be simulated. In such a case, the buoyancy term appears in both, the equation of motion of the u-component and of the w-component.

      An inclination is only possible in case of cyclic horizontal boundary conditions along `x` and `y` (see [bc_lr](#initialization_parameters--bc_lr) and [bc_ns](#initialization_parameters--bc_ns)) and [topography](#initialization_parameters--topography) = *'flat'*.

      For [alpha_surface](#initialization_parameters--alpha_surface) */= 0.0* the simultaneous use of [humidity](#initialization_parameters--humidity) *= .T.* is not allowed.

      Runs with inclined surface may require additional user-defined code as well as modifications to the default code. Please contact the PALM developer group in case you are planning to use this feature.


approximation:
  category: Mode
  type: C*20
  default:
    value: 'boussinesq'
  description:
    short: Parameter to choose the approximation of the model equations.
    long:  |
  allowed_values:
    - value: 'boussinesq'
      description: |
        The Boussinesq approximation assumes incompressibility of the fluid. The density is assumed to be constant in space (horizontally and vertically) and in time. The constant density is calculated in accordance with the values given for the parameters [surface_pressure](#initialization_parameters--surface_pressure) and [pt_surface](#initialization_parameters--pt_surface).

        **Note:**
        The specific value of the constant density only affects some of the diagnostic output quantities like the perturbation pressure or fluxes (see [flux_output_mode](#initialization_parameters--flux_output_mode)). Prognostic quantities are not affected at all, i.e. their values are independent of the density.
    - value: 'anelastic'
      description: |
        The anelastic approximation allows for a decrease of density with height. The density is still assumed to be constant along the horizontal directions and in time. The vertical profile of the density is computed based on the [surface_pressure](#initialization_parameters--surface_pressure) and the vertical profile of the potential temperature. The anelastic approximation requires [momentum_advec](#initialization_parameters--momentum_advec) = *'ws-scheme'*. Furthermore, [conserve_volume_flow](#initialization_parameters--conserve_volume_flow) = *.T.* is not supported.


bc_e_b:
  category: Boundary Conditions
  type: C*20
  default:
    value: neumann
  description:
    short: Bottom boundary condition of the subgrid-scale TKE.
    long: |
      The boundary condition is applied at all horizontal upward-facing walls accordingly. At vertical surfaces, e.g. building walls, a zero-gradient Neumann condition is always applied. At the top boundary a zero-gradient Neumann boundary condition is generally used, i.e. `e(nz+1) = e(nz)`.
  allowed_values:
    - value: 'neumann'
      description: |
        A zero-gradient Neumann is applied at horizontal surfaces, i.e. `e(k=0) = e(k=1)`, where `e(k=1)` is computed via a the prognostic SGS-TKE equation. Elevated horizontal surfaces (e.g. rooftops) are treated the same.
    - value: '(u\*)**2+neumann'
      description: |
        For this case, `e(k=0) = e(k=1)` is assumed too, but with `e(k=1)` = $(u_* / 0.1 )^2$, where $u_*$ is the friction velocity, as calculated via Monin-Obukhov relations.
        Note, this alternative is just a test option and should be used with care.


bc_lr:
  category: Boundary Conditions
  type: C*20
  default:
    value: cyclic
    depends_on: nesting, mesoscale nesting
  description:
    short: Boundary condition along `x` (for all quantities).
    long:  |
      **Remark concerning non-cyclic conditions:**

      In case of non-cyclic lateral boundaries, a Dirichlet condition is used at the inflow for all quantities, i.e. initial vertical profiles (see [initializing_actions](#initialization_parameters--initializing_actions)) are fixed during the run, except for the SGS-TKE, to which a zero-gradient Neumann condition is applied. At the outflow boundary, a radiation condition is used for all velocity components. A constant phase velocity is used, which is set to the maximum velocity allowed by the CFL criterion (i.e. for a Courant number of 1). For scalars, a Neumann condition is used. For the perturbation pressure, Neumann conditions are assumed both at the inflow and at the outflow.
      Further, for non-cyclic horizontal boundaries, [call_psolver_at_all_substeps](#initialization_parameters--call_psolver_at_all_substeps) = *.T.* should be used.

      In order to maintain a turbulent state of the flow in case of non-cyclic conditions, it may be necessary to continuously impose perturbations on the horizontal velocity field in the vicinity of the inflow throughout the entire simulation. One way to do this is to impose randomly distributed disturbances onto the inflow by using [create_disturbances](#runtime_parameters--create_disturbances). The horizontal range to which these perturbations are applied is controlled by the parameters [create_disturbances](#runtime_parameters--create_disturbances), [inflow_disturbance_begin](#runtime_parameters--inflow_disturbance_begin) and [inflow_disturbance_end](#runtime_parameters--inflow_disturbance_end). The vertical range and the perturbation amplitude are given by [disturbance_level_b](#runtime_parameters--disturbance_level_b), [disturbance_level_t](#runtime_parameters--disturbance_level_t), and [disturbance_amplitude](#runtime_parameters--disturbance_amplitude). The time interval at which perturbations are to be imposed is set by [dt_disturb](#runtime_parameters--dt_disturb). Note that these inflow perturbances are added in addition to the standard perturbances that are activated with [create_disturbances](#runtime_parameters--create_disturbances). The standard perturbances can be deactivated by setting the runtime-parameter [disturbance_energy_limit](#runtime_parameters--disturbance_energy_limit) *= 0.0*.
      A second approach to enable a continous turbulent inflow is to recycle the turbulent signal at a given recycling plane, or to read the turbulent inflow from the dynamic input file. For more information, please see [turbulent_inflow_method](#turbulent_inflow_parameters--turbulent_inflow_method) and references therein.

      Please note, usage of non-cyclic lateral boundaries requires very sensitive adjustments of the inflow (vertical profiles) and the bottom boundary conditions, e.g. a surface heating should may generate horizontal temperature gradients, inducing thermal circulations. Please check the model results very carefully. Detailed information can be found in the documentation of the [non-cyclic lateral boundary conditions](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/noncyclic).

      **Todo:** Treatment of bc_lr for offline nesting should be explained here.
  allowed_values:
    - value: cyclic
      description: |
        Periodic boundary conditions are assumed at the east and west domain boundary, i.e. the flow which leaves the model domain at the east domain boundary re-enters the domain at the west domain boundary.

        In case of cyclic boundary conditions in both horizontal directions, a [y-shift](#initialization_parameters--y_shift) of boundary values at the left/right boundary can be introduced.
    - value: dirichlet/radiation
      description: |
        Inflow from left (west domain boundary) and outflow to right (east domain boundary). This requires the multigrid method to be used for solving the Poisson equation for perturbation pressure (see [psolver](#initialization_parameters--psolver)), and it also requires cyclic boundary conditions along `y` (see [bc_ns](#initialization_parameters--bc_ns)).
    - value: radiation/dirichlet
      description: |
        Inflow from right (east domain boundary) and outflow to left (west domain boundary). This requires the multigrid method to be used for solving the Poisson equation for perturbation pressure (see [psolver](#initialization_parameters--psolver)) and it also requires cyclic boundary conditions along `y` (see [bc_ns](#initialization_parameters--bc_ns)).
    - value: nested
      description: |
        This setting shouldn't be required, because in a 3d-nested run, the child domain boundary condition is automatically set to *'nested'* by default, except for [nesting_bounds](#nesting_parameters--nesting_bounds) = *'vertical_only'* or *'cyclic_along_y'*. In the latter cases [bc_lr](#initialization_parameters--bc_lr) can be explicitely set to any allowed value /= *'nested'*.


bc_ns:
  category: Boundary Conditions
  type: C*20
  default:
    value: cyclic
    depends_on: nesting, mesoscale nesting
  description:
    short: Boundary condition along `y` (for all quantities).
    long:  |
      Please see [bc_lr](#initialization_parameters--bc_lr) for remarks concerning non-cyclic boundary conditions.
  allowed_values:
    - value: cyclic
      description: |
        Periodic boundary conditions are assumed at the north and south domain boundary, i.e. the flow which leaves the model domain at the north domain boundary re-enters the domain at the south domain boundary.
    - value: dirichlet/radiation
      description: |
        Inflow from north and outflow to south. This requires the multigrid method to be used for solving the Poisson equation for perturbation pressure (see [psolver](#initialization_parameters--psolver)), and it also requires cyclic boundary conditions along `x` (see [bc_lr](#initialization_parameters--bc_lr)).
    - value: radiation/dirichlet
      description: |
        Inflow from south and outflow to north. This requires the multigrid method to be used for solving the Poisson equation for perturbation pressure (see [psolver](#initialization_parameters--psolver)) and it also requires cyclic boundary conditions along `x` (see [bc_lr](#initialization_parameters--bc_lr)).
    - value: nested
      description: |
        This setting shouldn't be required, because in a 3d-nested run, the child domain boundary condition is automatically set to *'nested'* by default, except for [nesting_bounds](#nesting_parameters--nesting_bounds) = *'vertical_only'* or *'cyclic_along_x'*. In the latter cases [bc_ns](#initialization_parameters--bc_ns) can be explicitely set to any allowed value /= *'nested'*.


bc_p_b:
  category: Boundary Conditions
  type: C*20
  default:
    value: neumann
  description:
    short: Bottom boundary condition of the perturbation pressure.
    long: |
      Depending on the given value, the boundary condition is applied at the model domain bottom, i.e. at grid level `k=0`. Since vertical velocity is zero at the rigid lower boundary (`w(k=0) = 0.0`), the consistent Neumann condition [bc_p_b](#initialization_parameters--bc_p_b) = *'neumann'* (i.e. $\frac{\partial p}{\partial z} = 0$) should be used, which leaves the vertical component `w` unchanged at this level, when the pressure solver is applied. However, at elevated physical surfaces, i.e. terrain or buildings, no pressure boundary condition is applied at all. Simultaneous use of the Neumann boundary conditions both at the bottom and at the top boundary ([bc_p_t](#initialization_parameters--bc_p_t)) is allowed and recommended.

      **Note:**
      In case of simultaneous use of Neumann boundary conditions both at the top and bottom, the the multigrid solver (see [psolver](#initialization_parameters--psolver) = *'multigrid'*) calculates the perturbation pressure except for a (non-determined) constant offset. The global average value of perturbation pressure remains arbitrary. The convergence rate of the multigrid solver is usually lower than for mixed Dirichlet/Neumann conditions. Proper adjustment of steering parameters for the multigrid method may help to improve the convergence. In case of output of pressure perturbation data, you may remove the global offset manually.
  allowed_values:
    - value: dirichlet
      description: |
        A Dirichlet condition is applied with `p(k=0) = 0.0`.
    - value: neumann
      description: |
        A zero-gradient Neumann is applied at the model bottom, i.e. `p(k=0) = p(k=1)`.


bc_p_t:
  category: Boundary Conditions
  type: C*20
  default:
    value: neumann
    depends_on: psolver, nesting, mesoscale nesting
  description:
    short: Top boundary condition of the perturbation pressure.
    long: |
      Depending on the given value, the boundary condition is applied at the model domain top, i.e. at `k=nz+1`. For more information on pressure boundary conditions see [bc_p_b](#initialization_parameters--bc_p_b).

      In case that the multigrid solver is used (see [psolver](#initialization_parameters--psolver)), the default value is set to *'dirichlet'*.

      In case of nested runs, the default value of [bc_p_t](#initialization_parameters--bc_p_t) in the nest domains is not *'dirichlet'* but *'neumann'* instead, which will be set automatically. For the root domain of a nested run the default is 'dirichlet' as usual. For child domains see the note that is given for [bc_p_b](#initialization_parameters--bc_p_b).

  allowed_values:
    - value: dirichlet
      description: |
        A Dirichlet condition is applied with `p(k=nz+1) = 0.0`.
    - value: neumann
      description: |
        A zero-gradient Neumann is applied at the model top, i.e. `p(k=nz+1) = p(k=nz`).


bc_pt_b:
  category: Boundary Conditions
  type: C*20
  default:
    value: dirichlet
  description:
    short: Bottom boundary condition of the potential temperature at physical surfaces.
    long:  |
      In the atmosphere part of coupled ocean-atmosphere runs, [bc_pt_b](#initialization_parameters--bc_pt_b) is internally set and does not need to be prescribed.

      [bc_pt_b](#initialization_parameters--bc_pt_b) is allowed to be set as runtime parameter as well. In case of a restart run, it then overwrites the setting from the previous run and the new value will be used for further restarts, as long as no new setting via the runtime parameter namelist is made.

  allowed_values:
    - value: dirichlet
      description: |
        This case, `pt(k=0) = const =` [pt_surface](#initialization_parameters--pt_surface) + [pt_surface_initial_change](#initialization_parameters--pt_surface_initial_change) + [pt_surface_heating_rate](#initialization_parameters--pt_surface_heating_rate) * [time_since_3d_model_start](#initialization_parameters--time_since_3d_model_start). The value may be changed during the run using user-defined code. The resulting surface heat flux is then calculated via flux-gradient relationships using Monin-Obukhov similarity theory.

        If the radiation-module is switched on, surface temperatures are internally calculated by solving the surface energy balance equation.
    - value: neumann
      description: |
        A zero-gradient Neumann condition is applied at physical surfaces, i.e. `pt(k) = pt(k+1)`. A Neumann boundary condition is also used at vertical walls, e.g. building facades. A Neumann condition must be used when a [surface_heatflux](#initialization_parameters--surface_heatflux) is prescribed, because otherwise the resolved scale may contribute to the surface flux so that the constant value as given by [surface_heatflux](#initialization_parameters--surface_heatflux) would not exactly be guaranteed.


bc_pt_t:
  category: Boundary Conditions
  type: C*20
  default:
    value: initial_gradient
    depends_on: nesting, mesoscale nesting
  description:
    short: Top boundary condition of the potential temperature at grid point `k=nzt+1`.
    long: |
      Note that due to the staggered grid the prognostic equation for temperature is solved up to (including) `k=nz`.

      In case of nested runs, the default value of [bc_pt_t](#initialization_parameters--bc_pt_t) in the child domains is *'nested'* instead of *'initial_gradient'*.
  allowed_values:
    - value: dirichlet
      description: |
        This case, `pt(k=nz+1) =` *const*. The value is given by the initial temperature profile. This value does not change during the simulation.
    - value: initial_gradient
      description: |
        The value of the temperature gradient at the top is calculated from the initial temperature profile (see [pt_surface](#initialization_parameters--pt_surface), [pt_vertical_gradient](#initialization_parameters--pt_vertical_gradient)) by `initial_gradient = ( pt_init(k=nz+1) - pt_init(k=nz) ) / dzu(nz+1)`. Using this value (assumed constant during the simulation), the temperature boundary values are calculated as `pt(k=nz+1) = pt(k=nz) + initial_gradient * dzu(nz+1)`.
    - value: nested
      description: |
        In child domains a Dirichlet boundary condition is automatically assumed. Boundary values are obtained from the respective parent domain. Explicitly setting [bc_pt_t](#initialization_parameters--bc_pt_t) ='*nested*' is not required.
    - value: neumann
      description: |
         A zero-gradient Neumann condition is applied at the domain top, i.e. `pt(k=nz+1) = pt(k=nz)`. A Neumann condition must be used when a [top_heatflux](#initialization_parameters--surface_heatflux) is prescribed, because otherwise the resolved scale may contribute to the top flux so that the constant value as given by [top_heatflux](#initialization_parameters--surface_heatflux) would not exactly be guaranteed.


bc_q_b:
  category: Boundary Conditions
  type: C*20
  default:
    value: dirichlet
  description:
    short: Bottom boundary condition of the water vapor / total mixing ratio at physical surfaces.
    long: |
  allowed_values:
    - value: dirichlet
      description: |
        This case, `q(k=0) = const =` [q_surface](#initialization_parameters--q_surface) + [q_surface_initial_change](#initialization_parameters--q_surface_initial_change). The value may be changed during the run using user-defined code. The resulting surface latent heat flux is then calculated via flux-gradient relationships using Monin-Obukhov similarity theory.
    - value: neumann
      description: |
        A zero-gradient Neumann condition is applied at physical surfaces, i.e. `q(k) = q(k+1)`. A Neumann condition must be used when a [surface_waterflux](#initialization_parameters--surface_waterflux) is prescribed, because otherwise the resolved scale may contribute to the surface flux so that the constant value as given by [surface_waterflux](#initialization_parameters--surface_waterflux) would not exactly be guaranteed.

bc_q_t:
  category: Boundary Conditions
  type: C*20
  default:
    value: neumann
    depends_on: nesting, mesoscale nesting
  description:
    short: Top boundary condition of the water vapor / total water mixing ratio.
    long: |
      Note that due to the staggered grid the prognostic equation for the mixing ratio is solved up to (including) `k=nz`.

      In case of nested runs, the default value of [bc_q_t](#initialization_parameters--bc_q_t) in the child domains is *'nested'* instead of *'neumann'*.
  allowed_values:
    - value: dirichlet
      description: |
        This case, `q(k=nz+1) =` *const*. The value is given by the initial humidity profile. This value does not change during the simulation.
    - value: initial_gradient
      description: |
         A Neumann condition is applied at the model top. The value of the humidity gradient at the top is calculated from the initial humidity profile (see [q_surface](#initialization_parameters--q_surface), [q_vertical_gradient](#initialization_parameters--q_vertical_gradient)) by `initial_gradient = ( q_init(k=nz+1) - q_init(k=nz) ) / dzu(nz+1)`. Using this value (assumed constant during the simulation), the humidity boundary values are calculated as `q(k=nz+1) = q(k=nz) + initial_gradient * dzu(nz+1)`.
    - value: nested
      description: |
        In child domains a Dirichlet boundary condition is automatically assumed. Boundary values are obtained from the respective parent domain. Explicitly setting [bc_q_t](#initialization_parameters--bc_q_t) = *'nested'* is not required.
    - value: neumann
      description: |
         A zero-gradient Neumann condition is applied at the model top, i.e. `q(nz+1) = q(nz)`.


bc_s_b:
  category: Boundary Conditions
  type: C*20
  default:
    value: dirichlet
  description:
    short: Bottom boundary condition of the scalar concentration.
    long: |
  allowed_values:
    - value: dirichlet
      description: |
        This case, `s(k=0) = const =` [s_surface](#initialization_parameters--s_surface) + [s_surface_initial_change](#initialization_parameters--s_surface_initial_change). The value may be changed during the run using user-defined code. The resulting surface scalar flux is then calculated via flux-gradient relationships using Monin-Obukhov similarity theory.
    - value: neumann
      description: |
        A zero-gradient Neumann condition is applied at physical surfaces, i.e. `s(k) = s(k+1)`. A Neumann condition must be used when a [surface_scalarflux](#initialization_parameters--surface_scalarflux) is prescribed, because otherwise the resolved scale may contribute to the surface flux so that the constant value as given by [surface_scalarflux](#initialization_parameters--surface_scalarflux) would not exactly be guaranteed.


bc_s_t:
  category: Boundary Conditions
  type: C*20
  default:
    value: initial_gradient
    depends_on: nesting, mesoscale nesting
  description:
    short: Top boundary condition of the scalar concentration.
    long: |
      Note that due to the staggered grid the prognostic equation for the scalar is solved up to (including) `k=nz`.

      In case of nested runs, the default value of [bc_s_t](#initialization_parameters--bc_s_t) in the child domains is *'nested'* instead of *'initial_gradient'*.
  allowed_values:
    - value: dirichlet
      description: |
        This case, `s(k=nz+1) =` *const*. The value is given by the initial scalar profile. This value does not change during the simulation.
    - value: initial_gradient
      description: |
        The value of the [passive_scalar](#initialization_parameters--passive_scalar) gradient at the top is calculated from the initial scalar concentration profile (see [s_surface](#initialization_parameters--s_surface), [s_vertical_gradient](#initialization_parameters--s_vertical_gradient)) by `initial_gradient = ( s_init(k=nz+1) - s_init(k=nz) ) / dzu(nz+1)`. Using this value (assumed constant during the simulation), the scalar boundary values are calculated as `s(k=nz+1) = s(k=nz) + initial_gradient * dzu(nz+1)`.
    - value: nested
      description: |
        In child domains a Dirichlet boundary condition is automatically assumed. Boundary values are obtained from the respective parent domain. Explicitly setting [bc_s_t](#initialization_parameters--bc_s_t) = *'nested'* is not required.
    - value: neumann
      description: |
         A zero-gradient Neumann condition is applied at the model top, i.e. `s(k=nz+1) = s(k=nz)`.

bc_uv_b:
  category: Boundary Conditions
  type: C*20
  default:
    value: dirichlet
  description:
    short: Bottom boundary condition of the horizontal velocity components `u` and `v`.
    long: |
  allowed_values:
    - value: dirichlet
      description: |
        No-slip condition with `u = v = 0.0` at the bottom physical surface.
    - value: neumann
      description: |
        Free-slip condition with `u(k=0) = u(k=1)` and `v(k=0) = v(k=1)`. The free-slip condition is not alloed with a constant flux layer switched on (see [constant_flux_layer](#initialization_parameters--constant_flux_layer)) at the bottom boundary.

        **Note:**
        Free-slip conditions are not realized for vertical walls.


bc_uv_t:
  category: Boundary Conditions
  type: C*20
  default:
    value: dirichlet
    depends_on: nesting, mesoscale nesting
  description:
    short: Top boundary condition of the horizontal velocity components `u` and `v`.
    long:  |
      Note that due to the staggered grid the prognostic equation for the horizontal velocity components are solved up to (including) `k=nz`.

      For coupled ocean-atmosphere runs, [bc_uv_t](#initialization_parameters--bc_uv_t) is internally set to *'neumann'* and does not need to be prescribed.
  allowed_values:
    - value: dirichlet
      description: |
        This case, the top boundary values are set to the respective geostrophic wind values, i.e. `u(k=nz+1) = ug(nz+1)` and `v(k=nz+1) = vg(nz+1)`. Values do not change during the simulation. See [ug_surface](#initialization_parameters--ug_surface) and [vg_surface](#initialization_parameters--vg_surface) on how to set the vertical profile of the geostrophic wind.
    - value: dirichlet_0
      description: |
        This special condition can be used for channel flows. It yields the no-slip condition `u(k=nz+1) = ug(nz+1) = 0.0` and `v(k=nz+1) = vg(nz+1) = 0.0`.
    - value: nested
      description: |
        In child domains a Dirichlet boundary condition is automatically assumed. Boundary values are obtained from the respective parent domain. Explicitly setting [bc_uv_t](#initialization_parameters--bc_uv_t) = *'nested'* is not required.
    - value: neumann
      description: |
        Free-slip conditions with `u(k=nz+1) = u(k=nz)` and `v(k=nz+1) = v(k=nz)`.


building_height:
  category: Topography
  type: R
  default:
    value: 50.0
  si-unit: m
  description:
    short: Height of a single building.
    long: |
      [building_height](#initialization_parameters--building_height) must be less than the height of the model domain. This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_building'*.


building_length_x:
  category: Topography
  type: R
  default:
    value: 50.0
  si-unit: m
  description:
    short: Width of a single building along x-direction.
    long: |
      [building_length_x](#initialization_parameters--building_length_x) must be at least 3 * [dx](#initialization_parameters--dx) and no more than ( [nx](#initialization_parameters--nx) - 1 ) * [dx](#initialization_parameters--dx) - [building_wall_left](#initialization_parameters--building_wall_left). This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_building'*.


building_length_y:
  category: Topography
  type: R
  default:
    value: 50.0
  si-unit: m
  description:
    short: Width of a single building along y-direction.
    long: |
      [building_length_y](#initialization_parameters--building_length_y) must be at least 3 * [dy](#initialization_parameters--dy) and no more than ( [ny](#initialization_parameters--ny) - 1 ) * [dy](#initialization_parameters--dy) - [building_wall_south](#initialization_parameters--building_wall_south). This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_building'*.


building_wall_left:
  category: Topography
  type: R
  default:
    depends_on: '[nx](#initialization_parameters--nx)'
  si-unit: m
  description:
    short: x-coordinate of the left building wall (distance between the left building wall and the left border of the model domain).
    long: |
      [building_wall_left](#initialization_parameters--building_wall_left) must be at least 1 * [dx](#initialization_parameters--dx) and less than ( [nx](#initialization_parameters--nx) - 1 ) * [dx](#initialization_parameters--dx) - [building_length_x](#initialization_parameters--building_length_x). This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_building'*.

      By default, the building is centered along x-direction, i.e. [building_wall_left](#initialization_parameters--building_wall_left) = ( ( [nx](#initialization_parameters--nx) + 1 ) * [dx](#initialization_parameters--dx) - [building_length_x](#initialization_parameters--building_length_x) ) / 2. Due to the staggered grid, the building will be displaced by -0.5 [dx](#initialization_parameters--dx) along x-direction and -0.5 [dy](#initialization_parameters--dy) along y-direction.


building_wall_south:
  category: Topography
  type: R
  default:
    depends_on: '[ny](#initialization_parameters--ny)'
  si-unit: m
  description:
    short: y-coordinate of the south building wall (distance between the south building wall and the south border of the model domain).
    long: |
      [building_wall_south](#initialization_parameters--building_wall_south) must be at least 1 * [dy](#initialization_parameters--dy) and less than ( [ny](#initialization_parameters--ny) - 1 ) * [dy](#initialization_parameters--dy) - [building_length_y](#initialization_parameters--building_length_y). This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_building'*.

      By default, the building is centered along y-direction, i.e. [building_wall_south](#initialization_parameters--building_wall_south) = ( ( [ny](#initialization_parameters--ny) + 1 ) * [dy](#initialization_parameters--dy) - [building_length_y](#initialization_parameters--building_length_y) ) / 2. Due to the staggered grid, the building will be displaced by -0.5 [dx](#initialization_parameters--dx) along x-direction and -0.5 [dy](#initialization_parameters--dy) along y-direction.


calc_soil_moisture_during_spinup:
  category: Land Surface
  type: L
  default:
    value: .F.
  description:
    short: Parameter for switching on the water transport equation in the soil model during the spinup phase (see [spinup_time](#initialization_parameters--spinup_time)).
    long: |
      If set to *.T.*, an additional prognostic equation for the volumetric moisture content of the soil layer is solved.


call_psolver_at_all_substeps:
  category: Numerics
  type: L
  default:
    value: .T.
  description:
    short: Switch to steer the call of the pressure solver.
    long: |
      By default, the Poisson equation for perturbation pressure (see [psolver](#initialization_parameters--psolver)) is solved after each Runge-Kutta sub-timestep (see [timestep_scheme](#initialization_parameters--timestep_scheme)). In order to speed-up performance, [call_psolver_at_all_substeps](#initialization_parameters--call_psolver_at_all_substeps) = *.F.* forces the pressure solver to be called only at the last substep of the Runge-Kutta schemes. In some cases this already may sufficiently reduce the divergence of the velocity field. Nevertheless, small-scale ripples with wavelength $2 \Delta$ may be seen in the results.

      **Note:**
      The pressure solver must be called at each Runge-Kutta substep when [momentum_advec](#initialization_parameters--momentum_advec) = *'ws-scheme'*.

      **Warning:**
      Setting [call_psolver_at_all_substeps](#initialization_parameters--call_psolver_at_all_substeps) = *.F.* may force the simulation to become unstable. Please carefully check the [run-control file](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#RUN_CONTROL) for if the divergence is sufficiently reduced.


canyon_height:
  category: Topography
  type: R
  default:
    value: 50.0
  si-unit: m
  description:
    short: Street canyon height.
    long: |
      [canyon_height](#initialization_parameters--canyon_height) must be less than the height of the model domain. This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_street_canyon'*.


canyon_wall_left:
  category: Topography
  type: R
  default:
    depends_on: '[nx](#initialization_parameters--nx)'
  si-unit: m
  description:
    short: x-coordinate of the left canyon wall (distance between the left canyon wall and the left border of the model domain).
    long: |
      [canyon_wall_left](#initialization_parameters--canyon_wall_left) must be at least 1 * [dx](#initialization_parameters--dx) and less than ( [nx](#initialization_parameters--nx) - 1 ) * [dx](#initialization_parameters--dx) - [canyon_width_x](#initialization_parameters--canyon_width_x). This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_street_canyon'*.

      By default, the canyon is centered along x-direction, i.e. [canyon_wall_left](#initialization_parameters--canyon_wall_left) = ( ( [nx](#initialization_parameters--nx) + 1 ) * [dx](#initialization_parameters--dx) - [canyon_width_x](#initialization_parameters--canyon_width_x) ) / 2.


canyon_wall_south:
  category: Topography
  type: R
  default:
    depends_on: '[ny](#initialization_parameters--ny)'
  si-unit: m
  description:
    short: y-coordinate of the south canyon wall (distance between the south canyon wall and the south border of the model domain).
    long:  |
      [canyon_wall_south](#initialization_parameters--canyon_wall_south) must be at least 1 * [dy](#initialization_parameters--dy) and less than ( [ny](#initialization_parameters--ny) - 1 ) * [dy](#initialization_parameters--dy) - [canyon_width_y](#initialization_parameters--canyon_width_y). This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_street_canyon'*.

      By default, the canyon is centered along y-direction, i.e. [building_wall_south](#initialization_parameters--building_wall_south) = ( ( [ny](#initialization_parameters--ny) + 1 ) * [dy](#initialization_parameters--dy) - [canyon_width_y](#initialization_parameters--canyon_width_y) ) / 2.


canyon_width_x:
  category: Topography
  type: R
  default:
    value: ~
  si-unit: m
  description:
    short: Width of a single street canyon along x-direction.
    long:  |
      [canyon_width_x](#initialization_parameters--canyon_width_x) must be at least 3 * [dx](#initialization_parameters--dx) and no more than ( [nx](#initialization_parameters--nx) - 1 ) * [dx](#initialization_parameters--dx) - [canyon_wall_left](#initialization_parameters--canyon_wall_left). This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_street_canyon'*.
      No value given implies a canyon orientation along y-direction and respective setting of [canyon_width_y](#initialization_parameters--canyon_width_y).


canyon_width_y:
  category: Topography
  type: R
  default:
    value: ~
  si-unit: m
  description:
    short: Width of a single street canyon along y-direction.
    long:  |
      [canyon_width_y](#initialization_parameters--canyon_width_y) must be at least 3 * [dy](#initialization_parameters--dy) and no more than ( [ny](#initialization_parameters--ny) - 1 ) * [dy](#initialization_parameters--dy) - [canyon_wall_south](#initialization_parameters--canyon_wall_south). This parameter only becomes active if [topography](#initialization_parameters--topography) = *'single_street_canyon'*. No value given implies a canyon orientation along x-direction and respective setting of [canyon_width_x](#initialization_parameters--canyon_width_x).


cfl_factor:
  category: Numerics
  type: R
  default:
    depends_on: '[timestep_scheme](#initialization_parameters--timestep_scheme)'
  description:
    short: Factor limiting the time step as given by the Courant-Friedrichs-Levy (CFL) and other criteria.
    long:  |
      The internal model timestep `dt_3d` according to the CFL- and diffusion-criterion (as well as other criteria) is reduced by `dt_3d` * [cfl_factor](#initialization_parameters--cfl_factor) in order to avoid stability problems which may arise in the vicinity of the maximum allowed time step. The condition 0.0 < [cfl_factor](#initialization_parameters--cfl_factor) < 1.0 applies.

      The default value of [cfl_factor](#initialization_parameters--cfl_factor) depends on the timestep_scheme used:
      For the third order Runge-Kutta scheme ([timestep_scheme](#initialization_parameters--timestep_scheme) = *'runge-kutta-3'*) it is [cfl_factor](#initialization_parameters--cfl_factor) = *0.9*, for the second-order Runge-Kutta scheme ([timestep_scheme](#initialization_parameters--timestep_scheme) = *'runge-kutta-2'*) a value of *0.8* is used, and for the Euler scheme ([timestep_scheme](#initialization_parameters--timestep_scheme) = *'euler'*) [cfl_factor](#initialization_parameters--cfl_factor) = *0.1* applies.

      **Attention:** <br>
      The [cfl_factor](#initialization_parameters--cfl_factor) does not imply if a fixed time step has been set via [dt](#initialization_parameters--dt).


check_realistic_q:
  category: General Settings
  type: L
  default:
    value: .T.
  description:
    short: Parameter to switch on/off a check if simulation is allowed to start under supersaturated conditions.
    long: |
      For [check_realistic_q](#initialization_parameters--check_realistic_q) = *.T.*, the run is stopped right at the beginning if the mixing ratio exceeds the saturation mixing ratio (as determined from the initial temperature profile) by more than 2%.


cloud_droplets:
  category: Mode
  type: L
  default:
    value: .F.
  description:
    short: Parameter to switch on the Lagrangian cloud model (LCM).
    long: |
      For [cloud_droplets](#initialization_parameters--cloud_droplets) = *.T.* the Lagrangian particle model is used as a cloud model. Therefore, particles represent droplets and aerosols. Since it is computationally not feasible to simulate a realistic amount of droplets/particles, a single Lagrangian particle represents an ensemble of identical particles (with same radius, velocity, mass of solute aerosol, etc.) and is referred to as a "super-droplet". The number of droplets/particles in this ensemble is referred to as the "weighting factor" (see [initial_weighting_factor](#particle_parameters--initial_weighting_factor). The LCM must be steered via namelist [particle_parameters](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/particle_parameters).


collective_wait:
  category: Parallelization
  type: L
  default:
    value: .F.
  description:
    short: Set barriers in front of collective MPI operations.
    long: |
      Via [collective_wait](#initialization_parameters--collective_wait) = *.T.* barriers (`MPI_BARRIER`) will be set in front of collective MPI operations (e.g. `MPI_ALLTOALL`, `MPI_ALLREDUCE`). Depending on the communication network in use, this may speed up the MPI data transfer and hence the performance of the code. So far, speed-up has only been observed for fat-tree networks.


conserve_volume_flow:
  category: Mode
  type: L
  default:
    value: .F.
  description:
    short: Conservation of volume flow along `x`- and `y`-direction.
    long: |
      In case of lateral cyclic boundary conditions ([bc_lr](#initialization_parameters--bc_lr) = *'cyclic'* and [bc_ns](#initialization_parameters--bc_ns) = *'cyclic'*), [conserve_volume_flow](#initialization_parameters--conserve_volume_flow) = *.T.* guarantees that the volume flow through the xz- and yz-cross-sections of the total model domain remains constant at each time step throughout the simulation depending on the chosen [conserve_volume_flow_mode](#initialization_parameters--conserve_volume_flow_mode).

      In case of non-cyclic lateral boundary conditions ([bc_lr](#initialization_parameters--bc_lr) /= *'cyclic'* and [bc_ns](#initialization_parameters--bc_ns) /= *'cyclic'*) [conserve_volume_flow](#initialization_parameters--conserve_volume_flow) = *.T.* guarantees that the volume flow at the outflow boundary equals at each time step the volume flow at the inflow.

      Volume flow conservation is obtained via adding or subtracting a constant value to/from the respective velocity components. For cyclic boundary conditions velocities at all grid points are adjusted with the same offset, for non-cyclic conditions only wall normal velocity components at the outflow are adjusted.

      Note that conserve_volume_flow = *.T.* requires [dp_external](#initialization_parameters--dp_external) = *.F.*.

      In case of non-cyclic lateral boundary conditions, more detailed information about the conservation of volume flow is given [in the documentation](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/bc#Massfluxcorrection).

      **Warning:** <br>
      Volume flow conservation acts non-physically on the flow physics! This might end up in wrong vertical profiles of horizontal velocities. E.g., a main run with topography/buildings that follows a 'flat' prerun will show an increase in horizontal velocities above the topography, because there is no volume flow below the topography any more, and since the initial velocity profiles used for determining the required volume flow are those of the prerun.


conserve_volume_flow_mode:
  category: Mode
  type: C*16
  default:
    value: initial_profiles
  description:
    short: Parameter to set which velocities define the target volume flow.
    long: |
      [conserve_volume_flow_mode](#initialization_parameters--conserve_volume_flow) only comes into effect if [conserve_volume_flow](#initialization_parameters--conserve_volume_flow) = *.T.*.
  allowed_values:
    - value: initial_profiles
      description: |
        The target volume flow is calculated at `t=0` from the initial profiles of `u` and `v`. This option is also standard for non-cyclic lateral boundary conditions ([bc_lr](#initialization_parameters--bc_lr) /= *'cyclic'* or [bc_ns](#initialization_parameters--bc_ns) /= *'cyclic'*) because the (spanwise averaged) inflow profiles do not vary with time and are identical with the initial profiles.

        In case of a main run that follows a prerun the initial profiles are given by / taken from the prerun.
    - value: bulk_velocity
      description: |
        The target volume flow is calculated from predefined bulk velocities (see [u_bulk](#initialization_parameters--u_bulk) and [v_bulk](#initialization_parameters--v_bulk)). This setting is only allowed for cyclic lateral boundary conditions.


constant_flux_layer:
  category: Boundary Conditions
  type: L
  default:
    value: .T.
  description:
    short: Parameter to switch on a constant flux layer at physical surfaces.
    long: |
       By default, a constant flux layer is switched on at the bottom boundary between z = 0 and z = 0.5 * [dz](#initialization_parameters--dz) (or in case of terrain, buildings, etc., the first computational grid point above ground for `u`, `v` and the scalar quantities). For this setting, free-slip conditions for `u` and `v` (see [bc_uv_b](#initialization_parameters--bc_uv_b)) are not allowed at the bottom boundary. Likewise, setting a constant eddy diffusivity ([km_constant](#initialization_parameters--km_constant)) like it is done in DNS mode does not allow [constant_flux_layer](#initialization_parameters--constant_flux_layer) = *.T.*. Within the constant flux layer Monin-Obukhov similarity is used to calculate the turbulent vertical fluxes based on stability, roughness length, and values of the quantities (velocity, temperature, etc.) at the bottom and top of the constant flux layer.

       The roughness length can be declared via parameters [roughness_length](#initialization_parameters--roughness_length) and [z0h_factor](#initialization_parameters--z0h_factor).

       In case that a constant flux layer is explicitly switched off via [constant_flux_layer](#initialization_parameters--constant_flux_layer) = *.F.*, but surface fluxes shall be prescribed (e.g. by setting [surface_heatflux](#initialization_parameters--surface_heatflux)), it is required to set the parameter [use_surface_fluxes](#initialization_parameters--use_surface_fluxes) = *.T.*.


coupling_start_time:
  category: Mode
  type: R
  default:
    value: 0.0
  si-unit: s
  description:
    short: Simulated time of a precursor run.
    long:  |
      Sets the time period a precursor run shall run uncoupled. This parameter is used to set up the precursor run control for atmosphere-ocean-coupled runs. It has to be set individually to the atmospheric / oceanic precursor run. The time in the data output will show negative values during the precursor run. See [coupled runs](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/examples/coupled#precursur_runs) for further information.


cycle_mg:
  category: Numerics
  type: C*1
  default:
    value: w
  description:
    short: Type of cycle to be used with the multigrid method.
    long: |
      This parameter determines which type of cycle is applied in the multigrid method used for solving the Poisson equation for perturbation pressure (see [psolver](#initialization_parameters--psolver)). It defines in which way it is switched between the fine and coarse grids. So-called v- and w-cycles are realized. The computational cost of w-cycles is much higher than that of v-cycles, however, w-cycles give a much better convergence, so using w-cycles is recommended in general.
  allowed_values:
    - value: v
      description: |
        v-cycle. The computational cost of v-cycles is significantly lower compared to w-cycles, though it gives a poorer convergence.
    - value: w
      description: |
        w-cycle. The computational cost of w-cycles is significantly higher compared to v-cycles, though it gives a better convergence.


damp_level_1d:
  category: Initial Conditions
  type: R
  default:
    value_of: zu([nz](#initialization_parameters--nz)+1)
  si-unit: m
  description:
    short: Height where the damping layer begins in the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel).
    long: |
      This parameter is used to switch on a damping layer for the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel), which is generally needed for the damping of inertial oscillations. Damping is done by gradually increasing the value of the eddy diffusivities about 10% per vertical grid level (starting with the value at the height given by [damp_level_1d](#initialization_parameters--damp_level_1d), or possibly from the next grid point above), i.e. `km(k+1) = 1.1 * km(k)`. The values of `km` are limited to 10 m^2^ s^-1^ at maximum.
      
      The value of [damp_level_1d](#initialization_parameters--damp_level_1d) must be within the range `[0, zu(nzt+1)]`.

      This parameter only comes into effect if the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel) is switched on for the initialization of the 3d-model via [initializing_actions](#initialization_parameters--initializing_actions) = *'set_1d-model_profiles'*.


data_output_during_spinup:
  category: Data Output
  type: L
  default:
    value: .F.
  description:
    short: Parameter for switching on data output in the spinup phase (see [spinup_time](#initialization_parameters--spinup_time)).
    long: |
       If set to *.T.*, 2D, 3D, timeseries and profile data, as well as [surface data](#surface_output_parameters) will be output at regular intervals as prescribed by the user. There will be no output of masked data during the spinup phase.

       For radiation calculations during spinup, a starting time is calculated based on the setting of [origin_date_time](#initialization_parameters--origin_date_time), so that the spinup starts at [origin_date_time](#initialization_parameters--origin_date_time) - [spinup_time](#initialization_parameters--spinup_time). The run after the spinup phase then starts at [origin_date_time](#initialization_parameters--origin_date_time). In the output data, the timestamps during spinup will show negative values and the data after the spinup phase have timestamps >= *0.0* s.


dissipation_1d:
  category: Initial Conditions
  type: C*20
  default:
    value: detering
  description:
    short: Calculation method for the energy dissipation term in the TKE equation of the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel).
    long: |
      See also [mixing_length_1d](#initialization_parameters--mixing_length_1d).
  allowed_values:
    - value: as_in_3d_model
      description: |
        This value requires to set [mixing_length_1d](#initialization_parameters--mixing_length_1d) = *'as_in_3d_model'*, too.
        The dissipation is calculated as in the 3d-model using $diss = (0.19 + 0.74 * l / l_{grid}) * e^{1.5} / l$, with $e$ being the subgrid TKE, $l$ the mixing length, and $l_{grid}$ defined by the grid spacing (i.e. it depends on the grid spacing). Be aware, that this setting will not give realistic vertical profiles of the mean wind. It mainly serves for testing purposes.
    - value: detering
      description: |
        The energy dissipation is calculated as $diss = 0.064 * e^{1.5} / l$, with $e$ being the subgrid TKE and $l$ the mixing length.
    - value: prognostic
      description: |
        Energy dissipation is calculated via prognostic equation. To be used if the model is run in RANS mode using a TKE-$\epsilon$ closure (see [documentation](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/turbulence_parameterization#tkee_model)).


dp_external:
  category: Mode
  type: L
  default:
    value: .F.
  description:
    short: Switch to employ external pressure gradient as the driving force for the flow.
    long: |
      The external pressure gradient is controlled by parameters [dp_smooth](#initialization_parameters--dp_smooth), [dp_level_b](#initialization_parameters--dp_level_b) and [dpdxy](#initialization_parameters--dpdxy).

      dp_external = *.T.* requires [conserve_volume_flow](#initialization_parameters--conserve_volume_flow) = *.F.*. It is normally recommended to disable the Coriolis force by setting [omega](#initialization_parameters--omega) = *0.0*, since under presence of Coriolis force the large scale pressure gradient is normally given implicitly via the geostrophic wind (see [ug_surface](#initialization_parameters--ug_surface) and [vg_surface](#initialization_parameters--vg_surface).


dp_level_b:
  category: Mode
  type: R
  default:
    value: 0.0
  si-unit: m
  description:
    short: Lower limit of the vertical range for which the external pressure gradient is applied.
    long: |
      This parameter only applies if [dp_external](#initialization_parameters--dp_external) = *.T.*. It must hold the condition `zu(0) <=` [dp_level_b](#initialization_parameters--dp_level_b) `<= zu(nz)`. It can be used in combination with [dp_smooth](#initialization_parameters--dp_smooth) = *.T.* to generate a constant-flux boundary layer well below [dp_level_b](#initialization_parameters--dp_level_b) if [dp_level_b](#initialization_parameters--dp_level_b) >> *0.0*. The flow below [dp_level_b](#initialization_parameters--dp_level_b) is then purely driven by the shear stress at the top of the layer, which means that within the layer and under stationary conditions the vertical turbulent momentum flux is constant with height.

      There is no upper limit of the vertical range. The external pressure gradient is always applied up to the top of the model domain.


dp_smooth:
  category: Mode
  type: L
  default:
    value: .F.
  description:
    short: Vertically smooth the external pressure gradient using a sinusoidal smoothing function.
    long: |
      This parameter only applies if [dp_external](#initialization_parameters--dp_external) = *.T.*. It is useful in combination with [dp_level_b](#initialization_parameters--dp_level_b) >> *0.0* to generate a constant-flux boundary layer well below [dp_level_b](#initialization_parameters--dp_level_b).

dpdxy:
  category: Mode
  type: R
  shape: (2)
  default:
    value: 0.0
  si-unit: Pa m^-1^
  description:
    short: Values of the external pressure gradient applied along `x`- and `y`-direction.
    long: |
      This parameter only applies if [dp_external](#initialization_parameters--dp_external) = *.T.*. It sets the pressure gradient values along `x`- and `y`-direction. Negative values mean an acceleration, positive values mean deceleration along the respective direction. For example, dpdxy = -0.0002, 0.0002, drives the flow in positive `x`-direction and negative `y`-direction.

      **Note:** <br>
      Suitable values of the external pressure gradient that produce wind profiles with desired magnitudes usually have to be determined by test runs.


dt:
  category: Numerics
  type: R
  default:
    depends_on: '[timestep_scheme](#initialization_parameters--timestep_scheme), internally calculated'
  si-unit: s
  description:
    short: Length of time step for the 3d-model.
    long: |
      By default, the length of the time step is automatically determined after each time step based on stability criteria (e.g. Courant Friedrichs Levy (CFL) criterion, diffusion criterion, etc.). The respectiv value is then used for the next step. The actual value depends on these criteria and the parameter [cfl_factor](#initialization_parameters--cfl_factor), which in turn depends on [timestep_scheme](#initialization_parameters--timestep_scheme).

      If [dt](#initialization_parameters--dt) is assigned a value, then the time step is fixed to this value throughout the whole run (whether it fulfills the time step criteria or not). However, changes are allowed for restart runs ([dt](#initialization_parameters--dt) can also be used as a runtime parameter).

      In case that the automatically calculated time step meets the condition: [dt](#initialization_parameters--dt) < 0.00001 * [dt_max](#runtime_parameters--dt_max),
      the simulation will be aborted. Such situations usually arise in case of any numerical problem / instability which causes a non-realistic increase of the wind speed.

      For flat terrain and horizontally homogeneous setups with cyclic boundary conditions the automatically calculated time step may be enlarged by using a coordinate transformation (see [galilei_transformation](#initialization_parameters--galilei_transformation)), in order to save CPU time.

      **Warning:** <br>
      The simulation will crash in case of a fixed [dt](#initialization_parameters--dt), if the given value violates the time step criteria at any time throughout the run. Even worse, the simulation may continue to run up to the end, producing `NaN` data, if you have not switched on the floating point error detection by setting a respective compiler option (e.g. `-fpe0` for the Intel compiler). You should first run the case without setting [dt](#initialization_parameters--dt), check the minimum time step througout the simulation, and then choose a [dt](#initialization_parameters--dt smaller than that minimum.


dt_pr_1d:
  category: Data Output
  type: R
  default:
    value: ~
  si-unit: s
  description:
    short: Temporal interval of vertical profile output of the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel).
    long: |
      Data is written in ASCII format to file [LIST_PROFIL_1D](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#LIST_PROFIL_1D). This parameter is only in effect if the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel) has been switched on for the initialization of the 3d-model via [initializing_actions](#initialization_parameters--initializing_actions) = *'set_1d-model_profiles'*.


dt_run_control_1d:
  category: Data Output
  type: R
  default:
    value: 60.0
  si-unit: s
  description:
    short: Temporal interval of runtime control output of the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel).
    long: |
      Data is written in ASCII format to file [RUN_CONTROL](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#RUN_CONTROL). This parameter is only in effect if the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel) has been switched on for the initialization of the 3d-model via [initializing_actions](#initialization_parameters--initializing_actions) = *'set_1d-model_profiles'*.


dt_spinup:
  category: Numerics
  type: R
  default:
    value: 5.0
  si-unit: s
  description:
    short: Time step during integration of the [land surface](#land_surface_parameters), [urban surface](#urban_surface_parameters), and [radiation](#radiation_parameters) model during the spinup phase.
    long: |
      See [spinup_time](#initialization_parameters--spinup_time) for more details about the spinup phase.

      Longer time steps than the default value can be considered, depending on the specific configuration of the respective surface models.

      **Attention:** <br>
      The soil/wall spinup may become unstable when the timestep is chosen too large. Values of [dt_spinup](#initialization_parameters--dt_spinup) <= *10.0* are recommended.


dx:
  category: Grid
  type: R
  default:
    value: 1.0
  si-unit: m
  description:
    short: Horizontal grid spacing along the x-direction.
    long: |
      Along the x-direction, only an equidistant grid is allowed. It is recommended to use an isotropic grid within the turbulent boundary layer, or for those parts of the model domain where turbulence is expected, i.e. [dx](#initialization_parameters--dx) = [dy](#initialization_parameters--dy) = [dz](#initialization_parameters--dz).


dy:
  category: Grid
  type: R
  default: 1.0
  si-unit: m
  description:
    short: Horizontal grid spacing along the y-direction.
    long: |
      Along y-direction, only an equidistant grid is allowed. It is recommended to use an isotropic grid within the turbulent boundary layer, or for those parts of the model domain where turbulence is expected, i.e. [dx](#initialization_parameters--dx) = [dy](#initialization_parameters--dy) = [dz](#initialization_parameters--dz).


dz:
  category: Grid
  type: R
  shape: (10)
  default:
    value: ~
  si-unit: m
  description:
    short: Vertical grid spacing.
    long: |
      At least one value must be assigned. It is recommended to use an isotropic grid within the turbulent boundary layer, or for those parts of the model domain where turbulence is expected, i.e. [dx](#initialization_parameters--dx) = [dy](#initialization_parameters--dy) = [dz](#initialization_parameters--dz).

      By default, the model uses constant grid spacing along the z-direction, but it can be stretched using either the deprecated parameters [dz_stretch_level](#initialization_parameters--dz_stretch_level), [dz_stretch_factor](#initialization_parameters--dz_stretch_factor), [dz_max](#initialization_parameters--dz_max), or the new ones [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start), [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) which allow grid stretching to a finer or coarser grid and the definition of several stretching regions.

      If the new stretching method is employed, different [dz](#initialization_parameters--dz) values need to be specified (equal to the number of defined [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) + 1). This way, the model knows which grid spacing shall be used before and after the grid stretching region limited through [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start) and [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end).

      Assuming a constant [dz](#initialization_parameters--dz), the scalar levels (`zu`) are calculated as:

          zu(0) = 0.0,
          zu(1) = dz(1) * 0.5,
          zu(k) = zu(k-1) + dz(1).

      The w-levels lie half between them:

          zw(k) = ( zu(k) + zu(k+1) ) * 0.5,

      except for k=0, where

          zw(0) = 0.0.


dz_max:
  category: Grid
  type: R
  default:
    value: 999.0
  si-unit: m
  description:
    short: Allowed maximum vertical grid spacing.
    long: |
      If the vertical grid is stretched (see [dz_stretch_factor](#initialization_parameters--dz_stretch_factor) and [dz_stretch_level](#initialization_parameters--dz_stretch_level)), [dz_max](#initialization_parameters--dz_max) can be used to limit the vertical grid spacing to the given maximum value. The default value is *999.0* in order to prevent unrealistic larger vertical grid spacings and model domains.

      **Note:** <br>
      This parameter is deprecated. Please see parameters [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start) and [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) for the new method to steer the grid stretching.


dz_stretch_factor:
  category: Grid
  type: R
  default:
    value: 1.08
  description:
    short: Stretch factor for a vertically stretched grid (see [dz_stretch_level](#initialization_parameters--dz_stretch_level)).
    long: |
      The stretch factor should not exceed a value of approx. *1.10* - *1.12*, otherwise the discretization errors due to the stretched grid are not negligible anymore (see [Kalnay de Rivas, 1972](https://www.sciencedirect.com/science/article/pii/0021999172900605?via%3Dihub)).

      **Note:** <br>
      This parameter is deprecated. Please see parameters [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start) and [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) for the new method to steer the grid stretching.


dz_stretch_level:
  category: Grid
  type: R
  default:
    value: ~
  si-unit: m
  description:
    short: Height level above/below which the grid is to be stretched vertically.
    long: |
      [dz_stretch_level](#initialization_parameters--dz_stretch_level) is the height level above which the grid is to be stretched vertically. The vertical grid spacings [dz](#initialization_parameters--dz) above this level are calculated as

        [dz](#initialization_parameters--dz)(k+1) = [dz](#initialization_parameters--dz)(k) * [dz_stretch_factor](#initialization_parameters--dz_stretch_factor)

      and used as spacings for the scalar levels (zu). The w-levels are then defined as:

          zw(k) = ( zu(k) + zu(k+1) ) * 0.5.

      For [ocean mode](#ocean_parameters) simulations, [dz_stretch_level](#initialization_parameters--dz_stretch_level) is the negative height level (in m) below which the grid is to be stretched vertically. The vertical grid spacings [dz](#initialization_parameters--dz) below this level are calculated correspondingly as

        [dz](#initialization_parameters--dz)(k-1) = [dz](#initialization_parameters--dz)(k) * [dz_stretch_factor](#initialization_parameters--dz_stretch_factor).

      **Note:** <br>
      This parameter is deprecated. Please see parameters [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start) and [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) for the new method to steer the grid stretching.


dz_stretch_level_start:
  category: Grid
  type: R
  shape: (9)
  default: ~
  si-unit: m
  description:
    short: Height level above/below which the grid is to be stretched vertically.
    long: |
       Up to 9 heights (separate stretching regions) are allowed. By default no stretching is applied.

       [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start) is the height level above which the grid is to be stretched vertically. The vertical grid spacings [dz](#initialization_parameters--dz) between this level and the corresponding [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) are calculated as

          [dz](#initialization_parameters--dz)(k+1) = [dz](#initialization_parameters--dz)(k) * dz_stretch_factor_array

       and used as spacings for the scalar levels `zu`. The w-levels are then defined as:

           zw(k) = ( zu(k) + zu(k+1) ) * 0.5

       For [ocean mode](#ocean_parameters) simulations, [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start) is the negative height level (in m) below which the grid is to be stretched vertically. The vertical grid spacings [dz](#initialization_parameters--dz) between this level and the corresponding [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) are calculated as

          [dz](#initialization_parameters--dz)(k-1) = [dz](#initialization_parameters--dz)(k) * dz_stretch_factor_array.

       For each [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start) a corresponding [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) must be defined except for the last level. Here, it is possible to omit the value for [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) to consider 'endless' stretching until the value of [dz_max](#initialization_parameters--dz_max) is reached. In that case the stretching factor can not be calculated and is set to the value of [dz_stretch_factor](#initialization_parameters--dz_stretch_factor).

       **Hint:** <br>
       `dz_stretch_factor_array` is an array defined in the code which stores the different stretching factors that correspond to the defined stretching regions. The factors are calculated internally except for the case when the old stretching with [dz_stretch_factor](#initialization_parameters--dz_stretch_factor), [dz_stretch_level](#initialization_parameters--dz_stretch_level), and [dz_max](#initialization_parameters--dz_max) is used.


dz_stretch_level_end:
  category: Grid
  type: R
  shape: (9)
  default: ~
  si-unit: m
  description:
    short: Height level until which the grid is to be stretched vertically.
    long: |
       Up to 9 heights (separate stretching regions) are allowed.

       For each [dz_stretch_level_end](#initialization_parameters--dz_stretch_level_end) a corresponding [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start) must be defined. For further information see [dz_stretch_level_start](#initialization_parameters--dz_stretch_level_start).


e_init:
  category: Initialization
  type: R
  default:
    value: 0.0
  si-unit: m^2^ s^-2^
  description:
    short: Initial subgrid-scale TKE.
    long: |
      For [e_init](#initialization_parameters--e_init) > *0.0*, this parameter defines the initial subgrid-scale TKE level from which the initial eddy diffusivities K^m^ and K^h^ are calculated. The parameter has an effect only if [km_constant](#initialization_parameters--km_constant) is not set. The setting only affects the spinup phase of the simulation.

      Setting [e_init](#initialization_parameters--e_init) may help to avoid very small timesteps that may appear right at the beginning of RANS-mode simulations with [turbulence_closure](#initialization_parameters--turbulence_closure) = *'tke-e'*.


e_min:
  category: Mode
  type: R
  default:
    value: 0.0
  si-unit: m^2^ s^-2^
  description:
    short: Minimum subgrid-scale TKE.
    long: |
      This option adds artificial viscosity to the flow by ensuring that the subgrid-scale TKE does not fall below a minimum threshold value as given by [e_min](#initialization_parameters--e_min). It may help to avoid that diffusivities become unphysically small in RANS-mode simulations with [turbulence_closure](#initialization_parameters--turbulence_closure) = *'tke-e'*. Similar internal thresholds are often used in other RANS models, too.


end_time_1d:
  category: Initial Conditions
  type: R
  default:
    value: 864000.0
  si-unit: s
  description:
    short: Time to be simulated for the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel).
    long: |
      The default value corresponds to a simulated time of 10 days. Usually, after such period inertial oscillations have completely decayed and the solution of the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel) becomes stationary (see [damp_level_1d](#initialization_parameters--damp_level_1d)). This parameter only comes into effect if the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel) is switched on for initialization of the 3d-model via [initializing_actions](#initialization_parameters--initializing_actions) = *'set_1d-model_profiles'*.


ensemble_member_nr:
  category: Numerics
  type: I
  default:
    value: 0
  description:
    short: Seed to vary the number sequence given by the chosen [random-number generator](#initialization_parameters--random_generator).
    long:  |
      By setting this parameter to an integer between 1 and 2000, PALM is able to generate statistically independent members based on the same simulation setup. For each ensemble member the simulated instantaneous turbulent flow fields completely differ, but their mean statistical properties would converge to the same value, if the simulations run long enough, and provided that a stationary state can be reached. For each different value of [ensemble_member_nr](#initialization_parameters--ensemble_member_nr) a different set of random perturbations is imposed onto the flow fields.

      This parameter becomes only effective, if [random_generator](#initialization_parameters--random_generator) = *'random-parallel'* is set.


fft_method:
  category: Numerics
  type: C*20
  default:
    value: 'temperton-algorithm'
  description:
    short: FFT-method to be used.
    long:  |
      This option becomes only effective for [psolver](#initialization_parameters--psolver) = *'poisfft'* and defines which fast Fourier transformation (FFT) is used for solving the perturbation pressure equation. The respective FFT is also used for calculating power spectra (see [spectra](#spectra_parameters)).

      Two internal FFT methods are available (i.e. hard coded in the model), as well as FFT methods from external libraries.
  allowed_values:
    - value: 'temperton-algorithm'
      description: |
        The Temperton-method from Clive Temperton (ECMWF) which is computationally efficient. In case of cyclic horizontal boundary conditions (see [bc_lr](#initialization_parameters--bc_lr), [bc_ns](#initialization_parameters--bc_ns)) the number of horizontal grid points ([nx](#initialization_parameters--nx)+1, [ny](#initialization_parameters--ny)+1) to be used with this method must be composed of prime factors 2, 3 and 5. In case of non-cyclic horizontal boundary conditions [nx](#initialization_parameters--nx),[ny](#initialization_parameters--ny) must be composed of prime factors 2, 3 and 5.
    - value: 'singleton-algorithm'
      description: |
         The Singleton-method which is much slower than the Temperton-method, but has no restrictions concerning the number of grid points to be used with. Due to its very poor computational performance, this method is only recommended to be used for comparisons with the other available FFT methods.
    - value: 'fftw'
      description: |
         The ["Fastest Fourier Transform in the West"](https://www.fftw.org/). The FFTW-routines are significantly faster than those of the Temperton-FFT.

         To use this method requires setting of the cpp-preprocessor switch `-D__fftw` in the `%cpp_options` line of the [configuration file](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/palm_config), and to give the paths to the respective fftw include file and library via the `%compiler_options` and `%linker_options` line, respectively. In case the PALM installer has detected an existing FFTW library on your computer system, it automatically adds the required settings to the configuration file.

         **Note:** <br>
         The FFTW manual says:

         *FFTW is best at handling sizes of the form $2^a 3^b 5^c 7^d 11^e 13^f$ , where $e + f$ is either 0 or 1, and the other exponents are arbitrary. Other sizes are computed by means of a slow, general-purpose algorithm (which nevertheless retains O(n log n) performance even for prime sizes.*

         In case of cyclic horizontal boundary conditions (see [bc_lr](#initialization_parameters--bc_lr), [bc_ns](#initialization_parameters--bc_ns)) please check the size of [nx](#initialization_parameters--nx)+1 and [ny](#initialization_parameters--ny)+1, respectively. For non-cyclic horizontal boundary conditions [nx](#initialization_parameters--nx),[ny](#initialization_parameters--ny) should match the above conditions.
    - value: 'system-specific'
      description: |
         For running the code on NVidia GPUs, a CUDA-FFT is available, which requires setting of preprocessor switch `-D__cuda_fft` in the `%cpp_options` line of the [configuration file](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/palm_config). Be aware that running the code on GPUs is a test feature, and that only the dynamic core of the model is able to run on this architecture. Contact the PALM developers for more information.


flux_input_mode:
  category: General Settings
  type: C*40
  default:
    value: 'application-specific'
  description:
    short: Parameter to choose unit of fluxes that are given as input data.
    long: |
  allowed_values:
    - value: 'application-specific'
      description: |
        The flux input representation is chosen depending on the application. If no [land surface model](#land_surface_parameters) or [urban surface model](#urban_surface_parameters) is used, and, at the same time, [approximation](#initialization_parameters--approximation) = *'boussinesq'*, the fluxes are considered as "kinematic". For all other applications, the fluxes are represented as *'dynamic'*.
    - value: 'dynamic'
      description: |
        The flux input data is assumed to be given in "dynamic" units with W m^-2^ for sensible and latent heat fluxes, and N m^-2^ for momentum fluxes.
    - value: 'kinematic'
      description: |
        The flux input data is assumed to be given in "kinematic" units, with K m s^-1^ for sensible heat fluxes, kg kg^-1^ m s^-1^ for latent heat fluxes, and m^2^ s^-2^ for momentum fluxes.

flux_output_mode:
  category: General Settings
  type: C*40
  default:
    value: 'application-specific'
  description:
    short: Parameter to choose the unit of fluxes that appear in the output data.
    long:  |
  allowed_values:
    - value: 'application-specific'
      description: |
        The flux output representation is chosen depending on the application. If no [land surface model](#land_surface_parameters) or [urban surface model](#urban_surface_parameters) is used, and, at the same time, [approximation](#initialization_parameters--approximation) = *'boussinesq'*, the fluxes are considered as "kinematic". For all other applications, the fluxes are represented as *'dynamic'*.
    - value: 'dynamic'
      description: |
        The flux output data is assumed to be given in "dynamic" units with W m^-2^ for sensible and latent heat fluxes, and N m^-2^ for momentum fluxes.
    - value: 'kinematic'
      description: |
        The flux output data is assumed to be given in "kinematic" units with K m s^-1^ for sensible heat fluxes, kg kg^-1^ m s^-1^ for latent heat fluxes, and m^2^ s^-2^ for momentum fluxes.


galilei_transformation:
  category: Numerics
  type: L
  default:
    value: .F.
  description:
    short: Switch for applying the Galilei-transformation to the coordinate system of the model.
    long: |
      [galilei_transformation](#initialization_parameters--galilei_transformation) = *.T.* switches on a so-called Galilei-transformation which ensures that the coordinate system of the model moves with the speed and direction of the geostrophic wind. Alternatively, the horizontally averaged wind can be used as translation speed (see [use_ug_for_galilei_tr](#initialization_parameters--use_ug_for_galilei_tr). This speed will naturally change in time. The lower relative velocities in the translated system permit a larger time step [dt](#initialization_parameters--dt). Moreover, with this method, numerical inaccuracies of the advection-scheme (concerns, in particular, the [momentum advection](#initialization_parameters--momentum_advec)) are minimized. Switching the transformation on is only worthwhile if the geostrophic wind (ug, vg) and the averaged horizontal wind clearly deviate from the value 0. In each case, the distance the coordinate system has been moved over time is written to file [RUN_CONTROL](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#RUN_CONTROL).

      Usage of the Galilei-transformation requires [topography](#initialization_parameters--topography) = *'flat'*, a homogeneous surface, and cyclic boundary conditions along `x` and `y`.


homogenize_surface_temperature:
  category: Boundary Conditions
  type: L
  default:
    value: .F.
  description:
    short: Parameter to switch on the homogenization of surface temperature at the beginning of a run.
    long:  |
      At the beginning of a run, the surface temperature will be averaged over all bottom surface grid points in the simulated domain. This action will be carried out at the start of the main run as well as at the beginning of each restart run. The parameter is useful if the surface boundary condition for temperature changes between runs, more precisely, when the surface boundary condition changes from [bc_pt_b](#initialization_parameters--bc_pt_b) = *'neumann'*, where the surface temperature might be spatially heterogeneous, to *'dirichlet'*.
      This parameter is only allowed in combination with [neutral](#initialization_parameters--neutral) = *.F.* and [bc_pt_b](#initialization_parameters--bc_pt_b) = *'dirichlet'*.

      Note that in a nested run [homogenize_surface_temperature](#initialization_parameters--homogenize_surface_temperature) must be set the same for all domains. For such runs the spatially mean surface temperature of the root domain defines the surface temperature of the child domains too. [homogenize_surface_temperature](#initialization_parameters--homogenize_surface_temperature) will be automatically set to the root domain value.

      [homogenize_surface_temperature](#initialization_parameters--homogenize_surface_temperature) is allowed to be set as runtime parameter as well. In case of a restart run, it then overwrites the setting from the previous run and the new value will be used for further restarts, as long as no new setting via the runtime parameter namelist is made.


humidity:
  category: Physics
  type: L
  default:
    value: .F.
  description:
    short: Parameter to switch on the prognostic equation for the water vapor mixing ratio `q`.
    long:  |
      The initial vertical profile of `q` can be set via parameters [q_surface](#initialization_parameters--q_surface), [q_vertical_gradient](#initialization_parameters--q_vertical_gradient) and [q_vertical_gradient_level](#initialization_parameters--q_vertical_gradient_level). Boundary conditions can be set via [bc_q_b](#initialization_parameters--bc_q_b), [bc_q_t](#initialization_parameters--bc_q_t), [q_surface_initial_change](#initialization_parameters--q_surface_initial_change) and [surface_waterflux](#initialization_parameters--surface_waterflux).

      If the bulk cloud model is switched on (see [bulk_cloud_model](#initialization_parameters--bulk_cloud_model) = *.T.*), `q` becomes the total water mixing ratio (sum of water vapor and liquid water). The bulk cloud model physics must be steered via [bulk cloud parameters](#bulk_cloud_parameters).


inflow_disturbance_begin:
  category: Numerics
  type: I
  default:
    depends_on: '[bc_lr](#initialization_parameters--bc_lr), [bc_ns](#initialization_parameters--bc_ns)'
  description:
    short: Lower index limit of the horizontal range for which random perturbations are to be imposed on the horizontal velocity.
    long: |
      In case of cyclic horizontal boundary conditions, perturbations are added to the horizontal velocity components for each horizontal grid point. The value for [inflow_disturbance_begin](#initialization_parameters--inflow_disturbance_begin) must not be smaller than zero or larger than [nx](#initialization_parameters--nx) (in case of non-cyclic lateral boundary conditions along the x-direction) or [ny](#initialization_parameters--ny) (in case of non-cyclic lateral boundary conditions along the y-direction).

      If non-cyclic lateral boundary conditions are used, [inflow_disturbance_begin](#initialization_parameters--inflow_disturbance_begin) defines the number of grid points (counted horizontally from the respective inflow plane), from which on perturbations are imposed to the horizontal velocity components, provided that perturbations have been switched on via parameter [create_disturbances](#runtime_parameters--create_disturbances).
      The default value is then [inflow_disturbance_begin](#initialization_parameters--inflow_disturbance_begin) = `MIN( 10, nx/2 or ny/2)`.

      In case of non-cyclic lateral boundary conditions the purpose of these disturbances is to continously trigger the onset of turbulence at the laminar inflow. Disturbances are not required in general, e.g., if turbulence recycling (see [turbulent_inflow_method](#turbulent_inflow_parameters--turbulent_inflow_method) = *'recycle_...'*) is used.


inflow_disturbance_end:
  category: Numerics
  type: I
  default:
    depends_on: '[bc_lr](#initialization_parameters--bc_lr), [bc_ns](#initialization_parameters--bc_ns)'
  description:
    short: Upper index limit of the horizontal range for which random perturbations are to be imposed on the horizontal velocity.
    long: |
      In case of cyclic horizontal boundary conditions, perturbations are added to the horizontal velocity components for each horizontal grid point. The value for [inflow_disturbance_end](#initialization_parameters--inflow_disturbance_end) must not be smaller than zero or larger than [nx](#initialization_parameters--nx) (in case of non-cyclic lateral boundary conditions along the x-direction) or [ny](#initialization_parameters--ny) (in case of non-cyclic lateral boundary conditions along the y-direction).

      If non-cyclic lateral boundary conditions are used, [inflow_disturbance_end](#initialization_parameters--inflow_disturbance_end) defines the number of grid points (counted horizontally from the respective inflow plane) up to which perturbations are imposed to the horizontal velocity components, provided that perturbations have been switched on via parameter [create_disturbances](#runtime_parameters--create_disturbances). The default value is then [inflow_disturbance_end](#initialization_parameters--inflow_disturbance_end) = `MIN( 100, 3/4 nx or 3/4 ny)`.

      In case of non-cyclic lateral boundary conditions the purpose of these disturbances is to continously trigger the onset of turbulence at the laminar inflow. Disturbances are not required in general, e.g., if turbulence recycling (see [turbulent_inflow_method](#turbulent_inflow_parameters--turbulent_inflow_method) = *'recycle_...'*) is used.


initializing_actions:
  category: Initial Conditions
  type: C*100
  default:
    value: ~
  description:
    short: Initial conditions to be set and respectivly required actions to be carried out at model start.
    long:  |
      This parameter does not have a default value and must be assigned in each parameter set. For restart runs, [initializing_actions](#initialization_parameters--initializing_actions) = *'read_restart_data'* must be set. The available settings for the initial run (of a possible job chain) are described in the following.

      Values may be combined, separated by one or more blanks, e.g. [initializing_actions](#initialization_parameters--initializing_actions) = *'set_constant_profiles initialize_vortex'* , but the values of *'set_constant_profiles'* , *'set_1d-model_profiles'* , *'cyclic_fill'* , *'read_restart_data'* , *'read_from_file'* and *'by_user'* must not be given at the same time.

      For child domains in inital runs [initializing_actions](#initialization_parameters--initializing_actions) = *'interpolate_from_parent'* is automatically set.
  allowed_values:
    - value: 'by_user'
      description: |
        The initialization of the arrays of the 3d-model and surface-related quantities is under complete control of the user and has to be done in routine `user_init_3d_model` of the [user-interface](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/userint). Only recommended for very experienced users.
    - value: 'cyclic_fill'
      description: |
        3d-data from a precursor run are read. The precursor run is allowed to have a smaller domain along `x` and `y` compared with the main run. Also, different numbers of processors can be used for these two runs. Limitations are that the precursor run must use cyclic horizontal boundary conditions and that the number of vertical grid points, [nz](#initialization_parameters--nz), must be the same for the precursor run and the main run. If the total domain of the main run is larger than that of the precursor run, the domain is filled by cyclic repetition of the (cyclic) precursor data. This initialization method is required if turbulence recycling is used (see [turbulent_inflow_method](#turbulent_inflow_parameters--turbulent_inflow_method) = *'recycle_...'*). 3d-data must be made available to the run by adding the activation string *'cyclic'* to `palmrun`-option `-a`, e.g. `-a 'd3# cyclic'`.  The usage of a turbulent inflow is explained [here](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/examples/turbinf).
        Note that in case of [reference_state](#initialization_parameters--reference_state) = *'initial_profile'*, the main run uses the respective initial profiles of the precursor run.
    - value: 'initialize_bubble'
      description: |
        A 2d-Gauss-like shaped perturbation (y,z) of 0.4 K is added to the initial temperature field at a height of 150 m and centered along the y-direction. The temperature perturbation decreases with a standard deviation of 300 m and 150 m along `y` and `z`, respectively. This is a simple method to induce a rising warm air bubble producing clouds in a humid environment.
    - value: 'initialize_ptanom'
      description: |
        An option for testing scalar advection schemes.

        A 2d-Gauss-like shape disturbance (x,y) is added to the initial temperature field with radius 10.0 * [dx](#initialization_parameters--dx) and centered at `ic =` ([nx](#initialization_parameters--nx)+1)/2. Scalar advection tests may also require a horizontal wind profile constant with height and diffusion switched off (see *'initialize_vortex'* ). Additionally, the buoyancy term must be switched off in the equation of motion for w (this requires the user to comment out the call of buoyancy in the source code of `prognostic_equations.f90`).
    - value: 'initialize_vortex'
      description: |
        An option for testing advection schemes.

        The initial velocity field of the 3d-model corresponds to a Rankine-vortex with a vertical axis. Free-slip boundary conditions for u and v (see [bc_uv_b](#initialization_parameters--bc_uv_b), [bc_uv_t](#initialization_parameters--bc_uv_t)) are required. In order not to distort the vortex, an initial horizontal wind profile constant with height is necessary (to be set via [initializing_actions](#initialization_parameters--initializing_actions) = *'set_constant_profiles'*) and some other conditions have to be met (neutral stratification, diffusion must be switched off, see [km_constant](#initialization_parameters--km_constant)). The center of the vortex is located at `ic =` ([nx](#initialization_parameters--nx)+1)/2. It extends from k = 0 to k = [nz](#initialization_parameters--nz)+1. Its radius is 8 * [dx](#initialization_parameters--dx) and the exponentially decaying part extends to 32 * [dx](#initialization_parameters--dx) (see source code routine `init_rankine.f90`).
    - value: 'interpolate_from_parent'
      description: |
        This option is used for nested domains in nested initial runs. The initial conditions for a nested domain are then interpolated from its parent domain. This value is automatically set for child domains in initial runs.
    - value: 'read_from_file'
      description: |
        Initialization with input data derived from external models. For the DWD-COSMO model, an escpecially designed preprocessor tool called [INIFOR](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles/inifor) is available. This method requires a [dynamic input file](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles/pids#dynamic_input). This option can be combined with other options.
    - value: 'set_constant_profiles'
      description: |
        A horizontal velocity profile consisting of linear sections (see [ug_surface](#initialization_parameters--ug_surface), [ug_vertical_gradient](#initialization_parameters--ug_vertical_gradient), [ug_vertical_gradient_level](#initialization_parameters--ug_vertical_gradient_level) and [vg_surface](#initialization_parameters--vg_surface), [vg_vertical_gradient](#initialization_parameters--vg_vertical_gradient), [vg_vertical_gradient_level](#initialization_parameters--vg_vertical_gradient_level), respectively) as well as a vertical temperature and [humidity](#initialization_parameters--humidity) profile consisting of linear sections (see [pt_surface](#initialization_parameters--pt_surface), [pt_vertical_gradient](#initialization_parameters--pt_vertical_gradient), [q_surface](#initialization_parameters--q_surface) and [q_vertical_gradient](#initialization_parameters--q_vertical_gradient)) are assumed as horizontally homogeneous initial state. The subgrid-scale TKE is set to 0 but eddy diffusivities `km` and `kh` are set to very small values because otherwise no TKE would initially be generated.

        Instead of using the geostrophic wind for constructing the initial u,v-profiles, these profiles can also be directly set using parameters [u_profile](#initialization_parameters--u_profile), [v_profile](#initialization_parameters--v_profile), and [uv_heights](#initialization_parameters--uv_heights), e.g. if observed profiles are available as initial state. In runs with non-cyclic horizontal boundary conditions these profiles are also used as fixed mean inflow profiles.
    - value: 'read_restart_data'
      description: |
        Must be set in restart runs, for parent as well as for all existing child domains.
    - value: 'read_spinup_data'
      description: |
        Initialization of land and wall surface data with provided spinup data from a previous run. This option is thought to initialize surfaces in an initial run without repeating the surface spinup. This is e.g. useful in ensemble runs (see [ensemble_member_nr](#initialization_parameters--ensemble_member_nr)) where the initial state of the soil, the walls, the surfaces and the atmosphere is identical but the realization of random turbulence is different.

        Values may be combined with all other actions, e.g. [initializing_actions](#initialization_parameters--initializing_actions) = *'set_constant_profiles'*, except for the values of *'read_restart_data'* . To use this option, spinup data from a previous run with [spinup_time](#initialization_parameters--spinup_time) /= *0.0* must be available. This data is written into [SPINOUT](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#SPINOUT) triggered by `palmrun ... -a "... spinout"`. Please note, reading and writing surface spinup data is only possible with [restart_data_format](#initialization_parameters--restart_data_format) = *'mpi'* or *'mpi_shared_memory'*. In order to input the surface data in an initial run, the spinin attribute must be given: `palmrun ... -a "d3# ... spinin"`.


km_constant:
  category: Numerics
  type: R
  default:
    value: ~
  si-unit: m^2^ s^-1^
  description:
    short: Constant eddy diffusivities are used.
    long: |
      By specifying this parameter, both the 1d and the 3d-model use constant values (in space and in time) for the eddy diffusivities `km =` *[km_constant](#initialization_parameters--km_constant)* and `kh = km /` [prandtl_number](#initialization_parameters--prandtl_number). The prognostic equation for the subgrid-scale TKE is switched off. Constant eddy diffusivities are only allowed with the constant flux layer ([constant_flux_layer](#initialization_parameters--constant_flux_layer)) switched off. In DNS mode [km_constant](#initialization_parameters--km_constant) can be used to set the molecular viscosity.


large_scale_forcing:
  category: Initial Conditions / Boundary Conditions
  type: L
  default:
    value: .F.
  description:
    short: Parameter to choose large-scale forcing from an external file.
    long: |
      [large_scale_forcing](#initialization_parameters--large_scale_forcing) = *.T.* requires the input file [LSF_DATA](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#LSF_DATA). This file contains two kinds of information: time-dependent surface values and time-dependent profiles which can be provided either by measurements or by larger scale models. In more detail, the file contains the following data/parameters:

        - time-dependent surface heat flux
        - time-dependent surface water flux
        - surface temperature (see [pt_surface](#initialization_parameters--pt_surface)
        - surface humidity
        - surface pressure (see [surface_pressure](#initialization_parameters--surface_pressure))
        - vertical profiles of the geostrophic wind components (see [ug](#initialization_parameters--ug) and [vg](#initialization_parameters--vg))
        - the large-scale vertical subsidence profile `w_subs`
        - the horizontal large-scale advection tendencies of temperature `td_lsa_thetal` and humidity `td_lsa_q`
        - the large-scale subsidence tendencies of temperature `td_sub_thetal` and humidity `td_sub_q`

      An example can be found [here](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/examples/lsf).

      [large_scale_forcing](#initialization_parameters--large_scale_forcing) = *.T.* requires [humidity](#initialization_parameters--humidity) = *.T.*. It is not implemented for the ocean mode, and it does also not work for non-cyclic lateral boundary conditions and non-flat topography. It is possible to drive the simulations either by means of surface fluxes or by means of prescribed surface values for temperature and humidity.

      In case of simulating moderately tall buildings on otherwise flat terrain, large-scale forcing can be used with additional setting of [lsf_exception](#initialization_parameters--lsf_exception) = *.T.*. However, such setups havn't been tested so far and results should be checked with care.

      In case that large-scale forcing shall be used without [nudging](#initialization_parameters--nudging), initial profiles of potential temperature, humidity, and horizontal wind components have to be provided by means of [pt_surface](#initialization_parameters--pt_surface), [pt_vertical_gradient](#initialization_parameters--pt_vertical_gradient), [pt_vertical_gradient_level](#initialization_parameters--pt_vertical_gradient_level) etc.


large_scale_subsidence:
  category: Initial Conditions
  type: L
  default:
    value: .F.
  description:
    short: Parameter to enable large-scale subsidence/ascent.
    long: |
      Calculates and adds an additional tendency term `tend_subs` to the scalar quantities prognostic equations. For potential temperature, it e.g. looks like `tend_subs(k,j,i) = - w_subs(k)* dpt(k,j,i) / dz`.

      The profile for the subsidence velocity `w_subs` can either be set via [subs_vertical_gradient](#initialization_parameters--subs_vertical_gradient) and [subs_vertical_gradient_level](#initialization_parameters--subs_vertical_gradient_level) or by reading it from the large-scale forcing data set [LSF_DATA](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#LSF_DATA).

      In case of [use_subsidence_tendencies](#initialization_parameters--use_subsidence_tendencies) = *.T.*, the subsidence velocity `w_subs` is not used. Instead, subsidence tendencies for temperature and humidity are taken from the large-scale forcing data set [LSF_DATA](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#LSF_DATA) and applied to the respective prognostic variables.

      [large_scale_subsidence](#initialization_parameters--large_scale_subsidence) is not implemented for the ocean mode.

      **Attention:** <br>
      The large-scale vertical motion is only applied to the prognostic equation for the scalar quantities (potential temperature, humidity if [humidity](#initialization_parameters-- humidity) = *.T.*, or passive scalar if [passive_scalar](#initialization_parameters--passive_scalar) = *.T.*). It must not be applied to the momentum equations because it would violate the incompressibility condition. Applying it to the horizontal velocity components would result in mass inconsistencies.


latitude:
  category: Physics
  type: R
  default:
    value: 55.0
  si-unit: degree
  description:
    short: Geographical latitude.
    long: |
      The value of this parameter determines the value of the Coriolis parameters `f` and `f*`, provided that the angular velocity (see [omega](#initialization_parameters--omega)) is non-zero. Note that at equator the horizontal component of the Coriolis force is zero, while its vertical component has its maximum, and vice versa at the poles. For completely switching off the Coriolis force, it is thus recommended to set [omega](#initialization_parameters--omega) = *0.0* instead.

      [latitude](#initialization_parameters--latitude) is also used by the radiation model to determine the position of the sun.

      If a [static driver](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles/pids/static) is used, [latitude](#initialization_parameters--latitude) will be overwritten by the value given in the static driver.


longitude:
  category: Physics
  type: R
  default:
    value: 0.0
  si-unit: degree
  description:
    short: Geographical longitude.
    long: |
      The value is used by the radiation model to determine the position of the sun.

      If a [static driver](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles/pids/static is used, [longitude](#initialization_parameters--longitude) will be overwritten by the value given in the static driver.


loop_optimization:
  category: Numerics
  type: C*16
  default:
    value: 'cache'
  description:
    short: Method used to optimize loops within the prognostic equations.
    long: ''
  allowed_values:
    - value: 'cache'
      description: |
         All prognostic equations are solved within one big loop over the two horizontal indices `i` and `j` for a good cache utilization. This setting is recommended for all Intel/AMD/ARM based processors.
    - value: 'vector'
      description: |
        Single 3d-loops are used to calculate each tendency term of each prognostic equation. This allows for long vectors and is recommended for vector processors (e.g. NEC, but also for GPUs).


lsf_exception:
  category: Initial Conditions / Boundary Conditions
  type: L
  default:
    value: .F.
  description:
    short: Parameter to explicitly allow large-scale forcing in case of [topography](#initialization_parameters--topography) /= *'flat'*.
    long: |
      So far, [large_scale_forcing](#initialization_parameters--large_scale_forcing) is not implemented to be used together with topography.
      In case of simulating moderately tall buildings on otherwise flat terrain, large-scale forcing can be used with additional setting of [lsf_exception](#initialization_parameters--lsf_exception) = *.T.*. However, such setups havn't been tested so far and results should be checked with care.


masking_method:
  category: Numerics
  type: L
  default:
    value: .F.
  description:
    short: Switch for topography pressure boundary conditions in case of [psolver](#initialization_parameters--psolver) = *'multigrid_noopt'*.
    long: |
      In case of topography, by default, the pressure solvers (see [psolver](#initialization_parameters--psolver)) are running 'through' the topography, which means that no pressure boundary conditions are considered at the respective topography/wall surfaces (topography is masked).

      For [psolver](#initialization_parameters--psolver) = *'multigrid_noopt'* Neumann boundary conditions for perturbation pressure are used by default at all wall boundaries. In case of [masking_method](#initialization_parameters--masking_method) = *.T.*, this solver runs through the topography like it is done for all other pressure solvers that are available.

      **Note:** <br>
      [masking_method](#initialization_parameters--masking_method) only has an effect if [psolver] (#initialization_parameters--psolver) = *'multigrid_noopt'*, otherwise masking is always used.

      **Remarks:** <br>
      In case of very complex topography, including narrow street canyons or complex shapes resolved by only a few grid points, the use of [psolver](#initialization_parameters--psolver) = *'multigrid_noopt'* in combination with [masking_method](#initialization_parameters--masking_method) = *.F.* can lead to a blow up of wind velocity.
      A possible workaround to prevent such velocity blow-up is to preprocess the topography by filling holes and removing complex shapes on the small scale before running the LES. (This approach should have no significant effect on the flow field, as in LES the flow in such regions is poorly resolved and do not yield to reliable physical information.)

      If topography is prescribed and [psolver](#initialization_parameters--psolver) = *'multigrid_noopt'*, the mean velocity-divergence reduction (see [RUN_CONTROL](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#RUN_CONTROL)) is smaller in case of [masking_method](#initialization_parameters--masking_method) = *.T.* compared to *.F.* (about one-order of magnitude). This smaller reduction can be attributed to wall-bounded grid points, where the divergence after pressure correction remains significantly larger in case of masking, while the divergence reduction for non-wall-bounded grid points is similar in both cases. However, validation tests revealed that this smaller divergence reduction has no significant effect on the resulting flow.


mg_cycles:
  category: Numerics
  type: I
  default:
    value: 4
  description:
    short: Number of cycles to be used with the multigrid scheme.
    long: |
      This parameter determines the number of cycles to be carried out in the multigrid method used for solving the Poisson equation for perturbation pressure (see [psolver](#initialization_parameters--psolver)). The type of the cycles can be set with [cycle_mg](#initialization_parameters--cycle_mg).

      By default, a fixed number of cycles (4) is carried out. This number of cycles might not be sufficient for every simulation setup! The user should carefully check the [RUN_CONTROL](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#RUN_CONTROL) file whether the divergence of the velocity field is sufficiently reduced by the pressure solver. It should be reduced at least by two orders of magnitude during each time step. For cyclic boundary conditions along both horizontal directions (see [bc_lr](#initialization_parameters--bc_lr) and [bc_ns](#initialization_parameters--bc_ns)) [mg_cycles](#initialization_parameters--mg_cycles) = *2* is typically a good choice, for non-cyclic lateral boundary conditions or runs with topofraphy [mg_cycles](#initialization_parameters--mg_cycles) = *4* may be sufficient.

      If set [mg_cycles](#initialization_parameters--mg_cycles) = *-1*, the number of cycles depends on the requested accuracy of the scheme (see [residual_limit](#initialization_parameters--residual_limit)) and may vary from time step to time step. In this case, the CPU time for a run will be difficult to estimate since it heavily depends on the total number of the cycles to be carried out.


mg_switch_to_pe0_level:
  category: Numerics
  type: I
  default:
    value: -1
  description:
    short: Multigrid level at which data shall be gathered on PE0.
    long: |
      In case of a parallel run and [psolver](#initialization_parameters--psolver) = *'multigrid'* or *'multigrid_noopt'*, the value of this parameter defines on which multigrid level the data are gathered on PE0 in order to allow for a further coarsening of the grid. The finest grid defines the largest grid level. If [mg_switch_to_pe0_level](#initialization_parameters--mg_switch_to_pe0_level) = *0*, the gathering level is determined automatically and displayed in file [RUN_CONTROL](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#RUN_CONTROL). It is only possible to gather data from a level larger than the one determined automatically. A test run may be necessary to determine this level.

      Default setting is [mg_switch_to_pe0_level](#initialization_parameters--mg_switch_to_pe0_level) = *-1*, which prevents that data are collected on PE0 at all, i.e. coarsening of grids is limited by what the subdomains allow.

      **Note:** <br>
      The default setting is significantly faster compared to automatically determining or explicitly prescribing [mg_switch_to_pe0_level](#initialization_parameters--mg_switch_to_pe0_level). Even though the divergence reduction of the multigrid solver is slightly smaller with the default setting, gathering on PE0 does not justify the additional cost so far.


mixing_length_1d:
  category: Initial Conditions
  type: C*20
  default:
    value: 'blackadar'
  description:
    short: Mixing length used in the [1d-model](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/1dmodel).
    long: |
      See also [dissipation_1d](#initialization_parameters--dissipation_1d).
  allowed_values:
    - value: 'blackadar'
      description: |
        The so-called Blackadar mixing length is used, where $l = \frac{\kappa z}{1 + \frac{\kappa z}{\lambda}}$, with the limiting value of $\lambda = 2.7E^{-4} \frac{u_g}{f}$. This is a typical approach used in ensemble-averaged (RANS) models, which provides realistic vertical profiles of the mean wind for a neutrally stratified boundary layer. Such profiles can be used as first guess for the initial condition of the 3d-model.
    - value: 'as_in_3d_model'
      description: |
        The mixing length is calculated as in the 3d-model (i.e. it depends on the grid spacing). Be aware, that this setting will not give realistic vertical profiles of the mean wind. It mainly serves for testing purposes.


momentum_advec:
  category: Numerics
  type: C*16
  default:
    value: 'ws-scheme'
  description:
    short: Advection scheme to be used for the momentum equations.
    long: ''
  allowed_values:
    - value: 'ws-scheme'
      description: |
        The 5^th^ order upwind scheme of Wicker and Skamarock (2002, Mon. Wea. Rev, 130, 2088-2097) is used. It implies a small numerical dissipation that stabilizes the solution. Due to the additional dispersion, small scale fluctuations $< 8 \Delta$ are strongly damped, visible as a strong drop-off in the energy spectrum for the largest wavenumbers. The dispersion error is small. To assure a stable numerical solution the time integration has to be carried out with [timestep_scheme](#initialization_parameters--timestep_scheme) = *'runge-kutta-3'*.

        The scheme is based on a formulation of the advection term in flux form, which requires the flow field to be free of divergence, else a stable numerical solution is not given. Take care, that the pressure solver sufficiently reduces the divergence, especially if [psolver](#initialization_parameters--psolver) = *'multigrid'* has been set. [call_psolver_at_all_substeps](#initialization_parameters--call_psolver_at_all_substeps) = *.F.* should not be set.

        The computation of resolved-scale turbulent fluxes for output purposes is done inside the advection scheme, in order to provide data that is consistent with the numerical flow solution. Calculating turbulent fluxes via turbulent fluctuations that are defined as the deviation of a quantity from the horizontal domain average (like usually done after a time step within the PALM routine `flow_statistics`) may give completely wrong results.

        **Note**: Due to the larger stencil of this scheme (which extends over seven grid points) vertical grid stretching should be limited. With respect to the stencil and the domain decomposition, the scheme requires three ghost layers at the subdomain boundaries along x and y, so small subdomains (less than about $15 \times 15$ grid points along x and y) will require an excessively large number of ghost points. As a consequence, the time for exchanging ghost point data via the communication network may drastically increase and so decrease the computational performance.
    - value: 'pw-scheme'
      description: |
        The 2^nd^ order scheme of Piacsek and Williams (1970, J. Comp. Phys., 6, 392-405) with central differences in the form C3 is used. The drop-off in the energy spectrum is not as strong as for [momentun_advec](#initialization_parameters--momentum_advec) = *'ws-scheme'*, but the dispersion error is much stronger. In the vicinity of strong gradients, the scheme of Piacsek and Williams tends to produce so-called $2\Delta$ wiggles, which are well visible in results, e.g. at building corners.
    - value: 'up-scheme'
      description: |
        1^st^ order upwind scheme. The upstream scheme guarantees a stable solution only in combination with [timestep_scheme](#initialization_parameters--timestep_scheme) = *'euler'*. Note, this scheme is very diffusive, and hence, not well-suited for turbulence-resolving simulations.


monotonic_limiter_z:
  category: Numerics
  type: L
  default:
    value: .F.
  description:
    short: Control flag that enables a monotonic flux limiter for the vertical advection of passive scalars according to Skamarock (2006, Mon. Wea. Rev 134, 2241-2250).
    long: |
      If the limiter is enabled, vertical scalar advection will be monotone and positive definite but strong gradients may be smoothed. This will avoid numerical oscillations (over-/undershootinng) that can e.g. cause unrealistically high concentrations within poorly resolved cavities within urban environments, e.g. narrow street canyons, which can spoil the entire simulation results.

      Please note, that the limiter is only effective up to the height of the highest topography,
      and if [scalar_advec](#initialization_parameters--scalar_advec) = *'ws-scheme'* is set. Moreover, the monontonic limiter is currently only implemented for [loop_optimization](#initialization_parameters--loop_optimization) = *'cache'*.


netcdf_precision:
  category: Output
  type: C*20
  shape: (11)
  default:
    value: '<out>_NF90_REAL4'
  description:
    short: Defines the accuracy of the netCDF output.
    long: |
      By default, all netCDF output data has single precision (4 byte) accuracy. Double precision (8 byte) can be choosen alternatively. Accuracy for the different output data (cross sections, 3d-volume data, spectra, etc.) can be set independently by substituting the placeholder `<out>` with a string from the following list:

      |string  |meaning |
      |:-----|:-----------------|
      |**'xy'**  |horizontal cross section |
      |**'xz'**  |vertical (xz) cross section |
      |**'yz'** |vertical (yz) cross section |
      |**'2d'** |all cross sections|
      |**'3d'** |volume data |
      |**'pr'** |vertical profiles |
      |**'ts'** |time series, particle time series |
      |**'sp'** |spectra |
      |**'prt'** |particles |
      |**'all'** |all output quantities |

      **Example:** <br>
      If all cross section data and the particle data shall be output in double precision and all other quantities in single precision, set [netcdf_precision](#initialization_parameters--netcdf_precision) = *'2d_NF90_REAL8'*, *'prt_NF90_REAL8'*.
  allowed_values:
    - value: '<out>_NF90_REAL4'
      description: single precision (4 byte)
    - value: '<out>_NF90_REAL8'
      description: single precision (8 byte)


neutral:
  category: Mode
  type: L
  default:
    value: .F.
  description:
    short: Parameter to switch off calculation of the prognostic equation for temperature.
    long: |
      For simulating flows with pure neutral stratification, solving the temperature equation can be switched off via [neutral](#initialization_parameters--neutral) = *.T.* in order to save CPU time. Additionally, this will also switch off the calculation of all buoyancy related terms. In such case, non-zero values for parameters [surface_heatflux](#initialization_parameters--surface_heatflux) and [top_heatflux](#initialization_parameters--top_heatflux) are not allowed.


ngsrb:
  category: Numerics
  type: I
  default:
    value: 2
  description:
    short: Number of Gauss-Seidel iterations to be carried out on each grid level of the multigrid Poisson solver.
    long: |
      In case of using the multigrid method for solving the Poisson equation for perturbation pressure (see [psolver](#initialization_parameters--psolver)), this parameter defines the number of Gauss-Seidel iterations to be carried out on each grid level. High values of [ngsrb](#initialization_parameters--ngsrb) give better convergence. The default value of *2* reduces the divergence of the preliminary velocity field by about 1-2 orders of magnitude, which is sufficient in most cases.

      ***Note:*** The value of [ngsrb](#initialization_parameters--ngsrb) has a significant effect on the CPU requirement of the run.


nsor:
  category: Numerics
  type: I
  default:
    value: 20
  description:
    short: Number of iterations to be used with the SOR-scheme.
    long: |
      This parameter is only effective if the SOR-scheme is selected as pressure solver ([psolver](#initialization_parameters--psolver) = *'sor'*). The number of iterations necessary for a sufficient convergence of the scheme depends on the total number of grid points and is to be determined by appropriate test runs (the default value will not at all be sufficient for larger grid point numbers). The number of iterations used for the first call of the SOR-scheme (at `t` = 0) is determined via parameter [nsor_ini](#initialization_parameters--nsor_ini).


nsor_ini:
  category: Numerics
  type: I
  default:
    value: 100
  description:
    short: Initial number of iterations with the SOR-scheme.
    long: |
      This parameter is only effective if the SOR-scheme is selected as pressure solver ([psolver](#initialization_parameters--psolver) = *'sor'*) and specifies the number of initial iterations of the SOR scheme (at `t` = 0). The number of subsequent iterations at the following time steps is determined via parameter [nsor](#initialization_parameters--nsor). Usually, [nsor](#initialization_parameters--nsor) < [nsor_ini](#initialization_parameters--nsor_ini), since subsequent calls of the iterative pressure solver use the solution of the previous call as the initial value. Suitable test runs should determine whether sufficient convergence of the solution is obtained with the default value, and if necessary the value of  [nsor_ini](#initialization_parameters--nsor_ini) should be adjusted.


nudging:
  category: Mode
  type: L
  default:
    value: .F.
  description:
    short: Parameter to activate nudging towards a horizontal mean state.
    long: |
      Nudging is a relaxation technique which adjusts the large-eddy simulation to a given, larger scale flow situation. It can, for example, be used to simulate an observed situation. Further information can be found [here](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/nudging).

      With [nudging](#initialization_parameters--nudging) = *.T.*, additional tendencies are calculated for the prognostic variables `u`, `v`, `lpt`, and `q`. It requires setting of [humidity](#initialization_parameters--humidity) = *.T.* as well as  [large_scale_forcing](#initialization_parameters--large_scale forcing) = *.T.*. So far, it is not implemented for the ocean mode and non-cyclic lateral boundary conditions. An example can be found [here](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/examples/lsf).

      Additionally, for [nudging](#initialization_parameters--nudging) = *.T.* the input file [NUDGING_DATA](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#NUDGING_DATA) has to be provided. This file contains profile information at several time steps about the relaxation time scale $\tau$ and the prognostic variables `u`, `v`, `w`, `lpt`, `q` which must be provided by a larger scale model or by measurements.


nx:
  category: Grid
  type: I
  default:
    value: ~
  description:
    short: Number of gridpoints in x-direction.
    long:  |
      A value for this parameter must be assigned. Since the lower array bound in PALM starts with i = 0, the actual number of grid points is equal to [nx](#initialization_parameters--nx)+1. In case of cyclic boundary conditions along x, the domain size is ([nx](#initialization_parameters--nx)+1)* [dx](#initialization_parameters--dx).

      [nx](#initialization_parameters--nx)+1 must be even in case of cyclic boundary conditions along x (see [bc_lr](#initialization_parameters--bc_lr)) if the fft-solver is used for calculating the Poisson equation (see [psolver](#initialization_parameters--psolver)). The multigrid Poisson solver also requires [nx](#initialization_parameters--nx)+1 to be even if more than one PE is used for the run.

      For coupled atmosphere-ocean runs (see [details](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/examples/coupled)), the product of [dx](#initialization_parameters--dx) and [nx](#initialization_parameters--nx) in both parameter files [PARIN](#iofiles--PARIN) and [PARIN_O](#iofiles--PARIN_O) has to be same (same model domain length in x-direction).


ny:
  category: Grid
  type: I
  default:
    value: ~
  description:
    short: Number of gridpoints in y-direction.
    long: |
      A value for this parameter must be assigned. Since the lower array bound in PALM starts with j = 0, the actual number of grid points is equal to [ny](#initialization_parameters--ny)+1. In case of cyclic boundary conditions along y, the domain size is ([ny](#initialization_parameters--ny)+1) * [dy](#initialization_parameters--dy).

      [ny](#initialization_parameters--ny)+1 must be even in case of cyclic boundary conditions along y (see [bc_nc](#initialization_parameters--bc_ns)) if the fft-solver is used for calculating the Poisson equation (see [psolver](#initialization_parameters--psolver)). The multigrid Poisson solver also requires [ny](#initialization_parameters--ny)+1 to be even if more than one PE is used for the run.

      For coupled runs (see [details](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/examples/coupled)) the product of [dy](#initialization_parameters--dy) and ny in both parameter files [PARIN](#iofiles--PARIN) and [PARIN_O](#iofiles--PARIN_O) has to be same (same model domain length in y-direction).


nz:
  category: Grid
  type: I
  default:
    value: ~
  description:
    short: Number of gridpoints in z-direction.
    long: |
      A value for this parameter must be assigned. Since the lower array bound in PALM starts with k = 0 and since one additional grid point is added at the top boundary (k = [nz](#initialization_parameters--nz)+1), the actual number of grid points is [nz](#initialization_parameters--nz)+2. However, the prognostic equations are only solved up to [nz](#initialization_parameters--nz) (u, v, scalar quantities) or up to [nz](#initialization_parameters--nz)-1 (w). The top boundary for u, v and scalar quantities is at k = [nz](#initialization_parameters--nz)+1 (u, v) while at k = [nz](#initialization_parameters--nz) for w.

       The multigrid Poisson solver requires [nz](#initialization_parameters--nz) to be even.


omega:
  category: Physics
  type: R
  default:
    value: 7.29212E-5
  si-unit: rad s^-1^
  description:
    short: Angular velocity of the rotating system.
    long: |
      The angular velocity of the earth is set by default. The values of the Coriolis parameters are calculated as: <br>
      f = 2.0 * [omega](#initialization_parameters--omega) * sin([latitude](#initialization_parameters--latitude)) <br>
      f* = 2.0 * [omega](#initialization_parameters--omega) * cos([latitude](#initialization_parameters--latitude))

omega_sor:
  category: Numerics
  type: R
  default:
    value: 1.8
  description:
    short: Convergence factor to be used with the SOR-scheme.
    long: |
      If the SOR-scheme is selected ([psolver](#initialization_parameters--psolver) = *'sor'*), this parameter determines the value of the convergence factor, where *1.0'* <= [omega_sor](#initialization_parameters--omega_sor) < *2.0*. The optimum value of [omega_sor](#initialization_parameters--omega_sor) depends on the number of grid points along the different directions in space. For non-equidistant grids, it can only be determined by appropriate test runs.

origin_date_time:
  category: Geographical
  type: C*23
  default:
    value: '2019-06-21 12:00:00 +00'
  description:
    short: Date and time at model start.
    long: |
      The default is set to 21st of June 2019 at 12UTC (noon).

      **Examples:** <br>
      Further examples:\\
      Setting model-start time to 14th May 1995 at 16:30 CEST: *'1995-05-14 16:30:00 +02'* <br>
      Same time, but using UTC: *'1995-05-14 14:30:00 +00'* <br>
      Same time, but using PST (American Pacific Standard Time): *'1995-05-14 06:30:00 -08'* <br>
      Same time, but using AEST (Australian Eastern Standard Time): *'1995-05-15 02:30:00 +10'*

      Note, that UTC is always used internally. If you specify a time zone different from UTC, the time is converted to UTC. Output will always use UTC.

      See [use_fixed_date](#initialization_parameters--use_fixed_date) and [use_fixed_time](#initialization_parameters--use_fixed_time) for further time-related options.

      Please see also possible side effects concerning the time-coordinates in the [dynamic driver input file](../iofiles/pids/dynamic).

outflow_source_plane:
  category: Numerics
  type: R
  default:
    value: ~
  si-unit: m
  description:
    short: Horizintal position of the vertical source plane from where instantaneous values of prognostic variables are copied to the outflow boundary.
    long: |
      Parameter is effective only in case of [turbulent_outflow](#initialization_parameters--turbulent_outflow) = *.T.*. Affected quantities are `u`, `v`, `w`, `pt`, `q`, `s`, and `e`. The position needs to be given as the distance from the inflow boundary. The source plane must be positioned inside the model domain, i.e. `dx` <= [outflow_source_plane](#initialization_parameters--outflow_source_plane) <= `nx*dx`.

passive_scalar:
  category: Mode
  type: L
  default:
    value: .F.
  description:
    short: Parameter to switch on the prognostic equation for a passive scalar `s`.
    long: |
      The initial vertical profile of `s` can be set via parameters [s_surface](#initialization_parameters--s_surface),  [s_vertical_gradient](#initialization_parameters--s_vertical_gradient), and [s_vertical_gradient_level](#initialization_parameters--s_vertical_gradient_level). Boundary conditions can be set via [s_surface_initial_change](#initialization_parameters--s_surface_initial_change) and [surface_scalarflux](#initialization_parameters--surface_scalarflux).


prandtl_number:
  category: Physics
  type: R
  default:
    value: 1.0
  description:
    short: Ratio of the eddy diffusivities for momentum and heat (K~m~/K~h~f).
    long: |
      For runs with constant eddy diffusivity (see [km_constant](#initialization_parameters--km_constant)), this parameter can be used to assign the Prandtl number.


psolver:
  category: Numerics
  type: C*16
  default:
    value: 'poisfft'
  description:
    short: Scheme to be used to solve the Poisson equation for the perturbation pressure.
    long: |
      Solution of the Poisson equation is required after each time step (or partial time steps in the Runge-Kutta schemes) in order to keep the velocity field free of divergence.

      In principle, the so-called masking method is used, meaning that the schemes run 'through' the topography/buildings, so topography flags are completely ignored (i.e. not used) and pressure boundary conditions at walls are ignored (except at the bottom surface at grid point `k`= *0*). Divergence for grid points within topography/buildings are set to zero and wall normal velocities at surface grid points are set to zero after the pressure correction has been carried out. Because of that, the divergence reduction in the vicinity of walls is less effective. For [psolver](#initialization_parameters--psolver) = *'multigrid_noopt'* the masking method can be switched off with setting [masking_method](#initialization_parameters--masking_method) = *.F.*. However, in that case pressure boundary conditions at walls are currently not well defined, so using this setting is not recommended.

      In case of using a multistep Runge-Kutta time step scheme (see [timestep_scheme](#initialization_parameters--timestep_scheme)), the Poisson equation is by default solved after each of the substeps. In order to speed-up performance, it may be solved only for the last substep (see [call_psolver_at_all_substeps](#initialization_parameters--call_psolver_at_all_substeps)), but in general, the divergence reduction then might not be sufficient enough, resulting in a blow-up of velocities.
  allowed_values:
    - value: 'poisfft'
      description: |
        Direct method using FFT along x and y, solution of a tridiagonal matrix along z, and backward FFT. The FFT routines to be used can be determined via the initialization parameter [fft_method](#initialization_parameters--fft_method). The FFT solver can be used for cyclic boundary conditions both along x and y, and for non-cyclic boundary conditions both along x and y (e.g. in case of offline nesting using a dynamic driver). Mixed boundary conditions, e.g. cyclic along x and non-cyclic along y are not allowed. Depending on the FFT method and the horizontal boundary conditions that are used, the number of grid points along x and y must follow specific restrictions. Error messages are issued if restrictions are not met.
    - value: 'poisfft_sm'
      description: |
        Same as [psolver](#initialization_parameters--psolver) = *'poisfft'*, but the solver uses an internal 1d-decomposition for pressure. This way, the number of transpositions that are required between the forward/backward FFTs and the tridiagonal solver is reduced from 6 to 2, which for larger setups may improve the overall model performance by more than 20-30%. The virtual PE grid ([npex](#runtime_parameters--npex), [npey](#runtime_parameters--npey)) for the 2d-decomposition (which is used for all other quantities) is calculated by the solver. The solver usually sets [npey](#runtime_parameters--npey) to the number of cores available on a node, and [npex](#runtime_parameters--npex) to the number of nodes that are used in a run. If this leads to an unfavorable ratio of [npex](#runtime_parameters--npex) / [npey](#runtime_parameters--npey), cores on the node are split into smaller shared memory groups. Pressure is defined as a shared memory array, to which all cores on a node (or in a smaller shared memory group) have access. This way, only one transposition from x to y (and the inverse one) is required to solve the Poisson equation.

        **Attention:** [psolver](#initialization_parameters--psolver) = *'poisfft_sm'* is not allowed if less than 5 cores are used in a run.

        Runtime-parameters [npex](#runtime_parameters--npex) and [npey](#runtime_parameters--npey) are not allowed to be set.

        The total number of cores (given via {{{palmrun}}}-option {{{-X}}} must be a multiple of the number of cores used per node (given via {{{palmrun}}}-option {{{-T}}}, and {{{-T}}} must be a multiple of 4. Be aware that if {{{-X}}} is not a multiple if {{{-T}}}, the setting of {{{-T}}} is usually ignored by the batch system, and replaced by a value of which a multiple just approximates the total number of cores, which is then usually not a multiple of 4.

        This solver may not work for extreme ratios of [nx](#initialization_parameters--nx) / [ny](#initialization_parameters--ny).

        Respective error messages will be issued in case that the above restrictions are violated.
    - value: 'multigrid'
      description: |
        Iterative multigrid scheme. v- and w-cycles (see [cycle_mg](#initialization_parameters--cycle_mg)) are implemented. The convergence of the iterative scheme can be steered by the number of v-/w-cycles to be carried out for each call of the scheme ([mg_cycles](#initialization_parameters--mg_cycles)) and by the number of Gauss-Seidel iterations (see [ngsrb](#initialization_parameters--ngsrb)) to be carried out on each grid level. Instead, the requested accuracy can be given via [residual_limit](#initialization_parameters--residual_limit). The smaller this limit is, the more cycles have to be carried out and the number of cycles may vary from time step to time step. Because of possible excessive CPU time demands using [residual_limit](#initialization_parameters--residual_limit) is not recommended in general.

        If [mg_cycles](#initialization_parameters--mg_cycles) is set to its optimal value, the computing time of the multigrid scheme amounts approximately to that of the direct solver *'poisfft'* as long as the number of grid points in the three spatial directions corresponds to a power-of-two (2^n^) where n >= *5* must hold. With large n, the multigrid scheme can even be faster than the direct solver (although its accuracy is several orders of magnitude worse, but this does not affect the accuracy of the simulation). Nevertheless, test runs may have to be carried out in order to find out the optimum value for [mg_cycles](#initialization_parameters--mg_cycles), because the CPU time of a run very critically depends on this parameter.

        This scheme requires that the number of grid points of the subdomains (or of the total domain, if only one PE is used) along each of the directions can, at least, be divided once by 2 without rest. A further side condition arising from performance optimizations is that the number of grid points along z on the coarsest grid level must not be an odd number. If this is the case, the number of possible grid levels along z is reduced by one. For example, if nz(level 1) = 150 and nz(level 2) = 75 (odd number) it results in no possible grid coarsening (only one grid level possible), while nz(level 1) = 152,  nz(level 2) = 76, nz(level 3) = 38, nz(level 4) = 19 results in 3 possible multigrid levels.

        With parallel runs, starting from a certain grid level the data of all subdomains can be gathered on PE0 in order to allow for a further coarsening of the grid. The grid level for gathering can be manually set by [mg_switch_to_pe0_level](#initialization_parameters--mg_switch_to_pe0_level).

        *'multigrid'* is highly optimized for better performance. Data along the `k` index (vertical direction) is sorted from alternate even and odd indices into two blocks of completely even and odd indices respectively, which allows vectorization on INTEL processors of loops in the red/black scheme. Additionally, topography flags are completely ignored (i.e. not used) meaning that setting of [masking_method](#initialization_parameters--masking_method) = *.F.* is ignored. On fine grid levels only even or odd data are send via the lateral ghost point exchange. Speedup of the multigrid solver for medium sized cases (1024*1024*192 grid points) can be about 40% compared to *'multigrid_noopt'*.
    - value: 'multigrid_noopt'
      description: |
        Similar as *'multigrid'*, but less optimized. However, in contrast to *'multigrid'*, *'multigrid_noopt'* allows [masking_method](#initialization_parameters--masking_method) = *.F.*, i.e. setting of Neumann boundary conditions for the perturbation pressure at all wall boundaries.

        **Please note:** In combination with [masking_method](#initialization_parameters--masking_method) = *.F.*, the *'multigrid_noopt'* can lead to a blow-up of wind velocity in case of narrow street canyons or complex building shapes resolved by only a few grid points, because of over-determination of perturbation pressure. Please see further [remarks](../../tec/bugs/#remark1).
    - value: 'sor'
      description: |
        Successive over-relaxation method (SOR). The convergence of this iterative scheme is steered with the parameters [omega_sor](#initialization_parameters--omega_sor), [nsor_ini](#initialization_parameters-nsor_ini) and [nsor](#initialization_parameters--nsor).

        Compared to the direct method and the multigrid method, this scheme needs substantially more computing time. It should only be used for test runs, e.g. to compare results with the other pressure solver methods.


pt_damping_factor:
  category: Numerics
  type: R
  default:
    value: 0.0
  description:
    short: Factor for damping the 3d-field of potential temperature.
    long: |
      In case of non-cyclic lateral boundary conditions (see [bc_lr](#initialization_parameters--bc_lr) or [bc_ns](#initialization_parameters--bc_ns), a damping is applied to the potential temperature if a non-zero value is assigned to [pt_damping_factor](#initializing_parameters--pt_damping_factor).

      If switched on, the temperature is forced towards the value of its basic state (defined by the initial profile of the temperature). The intensity of damping is controlled by the value of [pt_damping_factor](#initializing_parameters--pt_damping_factor). The damping starts weakly at a distance from the inflow boundary defined by [pt_damping_width](#initialization_parameters--pt_damping_width) and rises according to a sin^2^-function to its maximum value at the inflow.

      This method effectively damps gravity waves at the inflow boundary in case of non-cyclic lateral boundary conditions (see [bc_lr](#initialization_parameters--bc_lr) or [bc_ns](#initialization_parameters--bc_ns)). If the damping factor is too weak, gravity waves can still emerge within the damping area. If the damping factor is too strong, gravity waves may develop directly downstream of the damping area.

      Note that the method has no effect if [turbulent_inflow_mehod](#turbulent_inflow_parameters--turbulent_inflow_mehod) = *'absolute_value'* or [turbulent_inflow_mehod](#turbulent_inflow_parameters--turbulent_inflow_mehod) = *'absolute_value_thermodynamic'*.

      Detailed information about the damping can be found in the documentation of the [non-cyclic lateral boundary conditions](../../tec/noncyclic).


pt_damping_width:
  category: Numerics
  type: R
  default:
    value: 0.0
  si-unit: m
  description:
    short: Width of the damping area for the potential temperature.
    long: |
      In case of non-cyclic lateral boundary conditions (see [bc_lr](#initialization_parameters--bc_lr) or [bc_ns](#initialization_parameters--bc_ns)), this parameter determines the range where damping of the potential temperature is applied. The damping domain starts at the inflow boundary and ranges up to a distance given by the value of [pt_damping_width](#initialization_parameters--pt_damping_width). The intensity of the damping is given by [pt_damping_factor](#initialization_parameters--pt_damping_factor). [pt_damping_width](#initialization_parameters--pt_damping_width) must not be lesser than zero or greater than the model domain length in the respective direction.



pt_reference:
  category: Mode
  type: R
  default:
    value_of: '[pt_surface](#initialization_parameters--pt_surface)'
  si-unit: K
  description:
    short: Reference temperature to be used in the buoyancy term.
    long: |
      This parameter only becomes effective if [reference_state](#initialization_parameters--reference_state) = *'single_value'* has been chosen for the reference state to be used in the buoyancy term.

      **Attention:** This parameter has no effect in case of the ocean mode switched on, where the in-situ density is used in the buoyancy term (see [reference_state](#initialization_parameters--reference_state) for more details).


pt_surface:
  category: Initial Conditions
  type: R
  default:
    value: 300.0
  si-unit: K
  description:
    short: Surface potential temperature.
    long: |
      This parameter assigns the value of the potential temperature `pt` at the surface (`k`=0). Starting from this value, the initial vertical temperature profile is constructed via [pt_vertical_gradient](#initialization_parameters--pt_vertical_gradient) and [pt_vertical_gradient_level](#initialization_parameters--pt_vertical_gradient_level). This profile is also used for the [1d-model](../../tec/1dmodel) as a stationary condition.

      **Attention:** In case of ocean mode runs, this parameter gives the temperature value at the sea surface, which is defined to be at `k` = [nzt](#initialization_parameters--nzt). The profile is then constructed from the surface down to the bottom of the model (sea floor).


pt_surface_heating_rate:
  category: Boundary Conditions
  type: R
  default:
    value: 0.0
  si-unit: K h^-1^
  description:
    short: Linear rate of surface temperature increase.
    long: |
      Instead of prescribing a [surface_heatflux](#initialization_parameters--surface_heatflux) also a surface heating rate can be set via [pt_surface_heating_rate](#initialization_parameters--pt_surface_heating_rate). Surface cooling can be achieved by assigning a negative value. Setting of [bc_pt_b](#initialization_parameters--bc_pt_b) = *'dirichlet'* is required. The surface heating rate can be combined with [pt_surface_initial_change](#initialization_parameters--pt_surface_initial_change).

      [pt_surface_heating_rate](#initialization_parameters--pt_surface_heating_rate) is allowed to be set as runtime parameter as well. In case of a restart run, it then overwrites the setting from the previous run and the new value will be used for further restarts, as long as no new setting via the runtime parameter namelist is made.


pt_surface_initial_change:
  category: Initial Conditions
  type: R
  default:
    value: 0.0
  si-unit: K
  description:
    short: Change in surface temperature to be applied at the beginning of a 3d run.
    long: |
      If [pt_surface_initial_change](#initialization_parameters--pt_surface_initial_change) is set to a non-zero value, the near surface sensible heat flux is not allowed to be given simultaneously (see [surface_heatflux](#initialization_parameters--surface_heatflux)).

      [pt_surface_initial_change](#initialization_parameters--pt_surface_initial_change) is allowed to be set as runtime parameter as well. It will apply for the respective run only. If a temperature change as wanted at the beginning of the next restart run too, [pt_surface_initial_change](#initialization_parameters--pt_surface_initial_change) has to be given in the runtime parameter namelist again.


pt_vertical_gradient:
  category: Initial Conditions
  type: R
  shape: (10)
  default:
    value: 0.0
  si-unit: K / 100 m
  description:
    short: Temperature gradient(s) of the initial temperature profile.
    long: |
      This temperature gradient holds starting from the height level defined by [pt_vertical_gradient_level](#initialization_parameters--pt_vertical_gradient_level) (precisely: for all uv levels `k` where `zu(k)` > [pt_vertical_gradient_level](#initialization_parameters--pt_vertical_gradient_level), `pt_init(k)` is set: `pt_init(k) = pt_init(k-1) + dzu(k) *` [pt_vertical_gradient](#initialization_parameters--pt_vertical_gradient)) up to the top boundary or up to the next height level defined by [pt_vertical_gradient_level](#initialization_parameters--pt_vertical_gradient_level). Below the first prescribed height level, the temperature is implicitly set constant with height. A total of 10 different gradients for 11 height intervals (10 intervals if [pt_vertical_gradient_level](#initialization_parameters--pt_vertical_gradient_level)(1) = *0.0*) can be assigned. The surface temperature is assigned via [pt_surface](#initialization_parameters--pt_surface).

      **Example:**<br>
      [pt_vertical_gradient](#initialization_parameters--pt_vertical_gradient) = *1.0*, *0.5*,<br>
      [pt_vertical_gradient_level](#initialization_parameters--pt_vertical_gradient_level) = *500.0*, *1000.0*, <br>
      defines the temperature profile to be neutrally stratified up to z = 500.0 m with a temperature given by [pt_surface](#initialization_parameters--pt_surface). For 500.0 m < z <= 1000.0 m the temperature gradient is 1.0 K / 100 m and for z > 1000.0 m up to the top boundary it is 0.5 K / 100 m (it is assumed here that the assigned height levels correspond with uv levels).

      **Attention:** <br>
      In case of ocean mode runs, the profile is constructed like described above, but starting from the sea surface (`k`=[nzt](#initialization_parameters--nzt)) down to the bottom boundary of the model. Height levels have then to be given as negative values, e.g. [pt_vertical_gradient_level](#initialization_parameters--pt_vertical_gradient_level) = *-500.0*, *-1000.0*.


pt_vertical_gradient_level:
  category: Initial Conditions
  type: R
  shape: (10)
  default:
  si-unit: m
  description:
    short: Height level above which the temperature gradient defined by [pt_vertical_gradient](#initialization_parameters--pt_vertical_gradient) is effective.
    long: |
      The height levels have to be assigned in ascending order. The default values result in a neutral stratification regardless of the values of [pt_vertical_gradient](#initialization_parameters--pt_vertical_gradient) (unless the top boundary of the model is higher than 100000.0 m). For the piecewise construction of temperature profiles see [pt_vertical_gradient](#initialization_parameters--pt_vertical_gradient).

      **Attention:** <br>
      In case of ocean mode runs, the (negative) height levels have to be assigned in descending order.


q_surface:
  category: Initial Conditions
  type: R
  default:
    value: 0.0
  si-unit: kg kg^-1^
  description:
    short: Surface water vapor / total water mixing ratio.
    long: |
      This parameter assigns the value of the mixing ratio `q` at the surface (`k`=0).  Starting from this value, the initial humidity profile is constructed with [q_vertical_gradient](#initialization_parameters--q_vertical_gradient) and [q_vertical_gradient_level](#initialization_parameters--q_vertical_gradient_level). This profile is also used for the [../../tec/1dmodel 1d-model](../../tec/1dmodel 1d-model) as a stationary profile.


q_surface_initial_change:
  category: Initial Conditions
  type: R
  default:
    value: 0.0
  si-unit: kg kg^-1^
  description:
    short: Change in surface water vapor / total water mixing ratio to be applied at the beginning of the 3d run.
    long: |
      If [q_surface_initial_change](#initialization_parameters--q_surface_initial_change) is set to a non-zero value, the near surface latent heat flux (water flux) is not allowed to be given simultaneously (see [surface_waterflux](#initialization_parameters--surface_waterflux)).


q_vertical_gradient:
  category: Initial Conditions
  type: R
  shape: (10)
  default:
    value: 0.0
  si-unit: kg kg^-1^ / 100 m
  description:
    short: Humidity gradient(s) of the initial humidity profile.
    long: |
      This humidity gradient holds starting from the height level defined by [q_vertical_gradient_level](#initialization_parameters--q_vertical_gradient_level) (precisely: for all uv levels `k` where `zu(k)` > [q_vertical_gradient_level](#initialization_parameters--q_vertical_gradient_level), `q_init(k)` is set: `q_init(k) = q_init(k-1) + dzu(k) *` [q_vertical_gradient](#initialization_parameters--q_vertical_gradient)) up to the top boundary or up to the next height level defined by [q_vertical_gradient_level](#initialization_parameters--q_vertical_gradient_level). A total of 10 different gradients for 11 height intervals (10 intervals if [q_vertical_gradient_level](#initialization_parameters--q_vertical_gradient_level)(1) = *0.0*) can be assigned. The surface humidity is assigned via [q_surface](#initialization_parameters--q_surface).

      **Example:**<br>
      [q_vertical_gradient](#initialization_parameters--q_vertical_gradient) = *0.001*, *0.0005*,<br>
      [q_vertical_gradient_level](#initialization_parameters--q_vertical_gradient_level) = *500.0*, *1000.0*, <br>
      defines the humidity to be constant with height up to z = 500.0 m with a value given by [q_surface](#initialization_parameters--q_surface). For 500.0 m < z <= 1000.0 m the humidity gradient is 0.001 / 100 m and for z > 1000.0 m up to the top boundary it is 0.0005 / 100 m (it is assumed here that the assigned height levels correspond with uv levels).


q_vertical_gradient_level:
  category: Initial Conditions
  type: R
  shape: (10)
  default:
    value: ~
  si-unit: m
  description:
    short: Height level from which on the humidity gradient defined by [q_vertical_gradient](#initialization_parameters--q_vertical_gradient) is effective.
    long: |
      The height levels are to be assigned in ascending order. The default results in a humidity constant with height regardless of the values of [q_vertical_gradient](#initialization_parameters--q_vertical_gradient) (unless the top boundary of the model is higher than 100000.0 m). For the piecewise construction of humidity profiles see [q_vertical_gradient](#initialization_parameters--q_vertical_gradient).


random_generator:
  category: Numerics
  type: C*20
  default:
    value: 'random-parallel'
  description:
    short: Random number generator to be used for creating uniformly distributed random numbers.
    long: |
      The random generator is mainly used if random perturbations are to be imposed on the velocity field or on the surface heat flux field (see [create_disturbances](#runtime_parameters--create_disturbances) and [random_heatflux](#initialization_parameters--random_heatflux)), but also for other purposes, e.g. to add random velocity fluctuations to Lagrangian particles, or for the synthetic inflow turbulence generator.

      **Note:** <br>
      Results from two otherwise identical model runs will not compare one-to-one if they have used different random number generators, or if they are different members of an ensemble of runs (see parameter [ensemble_member_nr](#initialization_parameters--ensemble_member_nr)).
  allowed_values:
    - value: 'random-parallel'
      description: |
        A fully parallelized random number generator, which creates random numbers in a reproducible order which is independent from the number of cores used for a specific run, i.e. independent from the domain decomposition. Runs with different domain decomposition but the same total domain should produce identical results. The parallel random number generator also provides ensemble run capability, which can be steered by specifying the parameter [ensemble_member_nr](#initialization_parameters--ensemble_member_nr).
    - value: 'numerical-recipes'
      description: |
        Random number generator from the "Numerical Recipes" book. Results are independent from the domain decomposition only for the perturbations imposed on the velocity field (see [create_disturbances](#runtime_parameters--create_disturbances)) but otherwise not. CPU-time for this generator does not scale with the number of cores, so it may become a bottleneck if larger number of cores (>100) are used. [random_generator](#initialization_parameters--random_generator) = *'numerical-recipes'* is not allowed if the synthetic turbulence generator module is used.
    - value: 'system-specific'
      description: |
        The Fortran built-in random number generator `RANDOM_NUMBER`. Results are independent from the domain decomposition only for the perturbations imposed on the velocity field (see [create_disturbances](#runtime_parameters--create_disturbances)) but otherwise not.[random_generator](#initialization_parameters--random_generator) = *'system-specific'* is not allowed if the synthetic turbulence generator module is used.


random_heatflux:
  category: Boundary Conditions
  type: L
  default:
    value: .F.
  description:
    short: Parameter to impose random perturbations to the prescribed heat flux at surface grid points (internally stored in 1d-array `surf%shf`).
    long: |
      If a near surface heat flux is used as a bottom boundary condition (see [surface_heatflux](#initialization_parameters--surface_heatflux)), it is by default assumed to be horizontally homogeneous. Random perturbations can be imposed on all respective surface grid points by setting [random_heatflux](#initialization_parameters--random_heatflux) = *.T.*. The disturbed heat flux is calculated by multiplying the value as given by [surface_heatflux](#initialization_parameters--surface_heatflux) at each respective grid point with a normally distributed random number with mean value and standard deviation of 1. This is repeated after every time step.

      In case of a non-flat topography, [random_heatflux](#initialization_parameters--random_heatflux) = *.T.*. imposes random perturbations on the combined heat flux composed of [surface_heatflux](#initialization_parameters--surface_heatflux) at the bottom surface and [wall_heatflux](#initialization_parameters--wall_heatflux)(0) at the topography top face. Furthermore, perturbations are only added if the respective surface is upward facing.


rans_const_c:
  category: Numerics
  type: R
  shape: (5)
  default:
    value: [0.55, 1.44, 1.92, 1.44, 0.0]
  description:
    short: Constants used in the RANS mode turbulence closure.
    long: |
      The internally used variable is dimensioned as `rans_const_c(0:4)`. Array elements refer to constants $c_0 = \sqrt[4]{c_\mu}$, $c_1$, $c_2$, $c_3$, $c_4$,  that are used in the RANS equations as follows:

      [rans_const_c](#initialization_parameters--rans_const_c)(0) = $c_0$ <br>
      [rans_const_c](#initialization_parameters--rans_const_c)(1) = $c_1$ <br>
      [rans_const_c](#initialization_parameters--rans_const_c)(2) = $c_2$ <br>
      [rans_const_c](#initialization_parameters--rans_const_c)(3) = $c_3$ <br>
      [rans_const_c](#initialization_parameters--rans_const_c)(4) = $c_4$

      The default values are according to the standard TKE-e turbulence closure (see [turbulence_closure](#initialization_parameters--turbulence_closure)).


rans_const_sigma:
  category: Numerics
  type: R
  shape: (2)
  default:
    value: [1.0, 1.3]
  description:
    short: Constants used in the RANS mode turbulence closure.
    long: |
      The internally used variable is dimensioned `rans_const_sigma(2)`and respective constants $\sigma_e$ and $\sigma_\epsilon$ that are used in the turbulence closure refer to the array elements as follows:

      [rans_const_sigma](#initialization_parameters--rans_const_sigma)(1) = $\sigma_e$ <br>
      [rans_const_sigma](#initialization_parameters--rans_const_sigma)(2) = $\sigma_\epsilon$

      The default values are according to the standard TKE-e turbulence closure (see [turbulence_closure](#initialization_parameters--turbulence_closure)).


rayleigh_damping_factor:
  category: Numerics
  type: R
  default:
    value: 0.0
  description:
    short: Factor for Rayleigh damping.
    long: |
      A so-called Rayleigh damping is applied to all prognostic variables if a non-zero value is assigned to [rayleigh_damping_factor](#initialization_parameters--rayleigh_damping_factor). If switched on, horizontal velocities, temperature, humidity/scalar (if switched on) and salinity (in case of ocean mode) are forced towards the value of their respective basic states (defined by the initial profiles of the geostrophic wind, temperature, etc., or in case of offline nesting, defined by the current mean of wind components, temperature, etc. of the mesoscale model). In case of large-scale subsidence (see [subs_vertical_gradient](#initialization_parameters--subs_vertical_gradient)) the basic state of temperature and humidity is adjusted with respect to the subsidence. Scalar quantities can be excluded from the damping (see [scalar_rayleigh_damping](#initialization_parameters--scalar_rayleigh_damping)). The intensity of damping is controlled by the value the [rayleigh_damping_factor](#initialization_parameters--rayleigh_damping_factor) is assigned to. The damping starts weakly at a height defined by [rayleigh_damping_height](#initialization_parameters--rayleigh_damping_height) and rises according to a sin^2^-function to its maximum value at the top (ocean: bottom) boundary.

      This method effectively damps gravity waves, caused by boundary layer convection, which may spread out vertically in the inversion layer and which are reflected at the top (ocean: bottom) boundary.

      The Rayleigh damping factor must hold the condition *0.0* <= [rayleigh_damping_factor](#initialization_parameters--rayleigh_damping_factor) <= *1.0*. Large values (close to 1.0) may cause numerical instabilities.


rayleigh_damping_height:
  category: Numerics
  type: R
  default:
    depends_on: atmosphere or ocean mode
  si-unit: m
  description:
    short: Height above (in ocean below) which the Rayleigh damping starts.
    long: |
      With Rayleigh damping switched on (see [rayleigh_damping_factor](#initialization_parameters--rayleigh_damping_factor)), this parameter determines the range where damping is applied. By default, Rayleigh damping will be applied in the upper (ocean: lower) third of the model domain. Exactly [rayleigh_damping_height](#initialization_parameters--rayleigh_damping_height) = 2/3 * `zu(nzt)` in the atmosphere, and [rayleigh_damping_height](#initialization_parameters--rayleigh_damping_height) = 2/3 * `zu(nzb)` in the ocean.


reference_state:
  category: Mode / Initial Conditions
  type: C*20
  default:
    value: 'initial_profile'
  description:
    short: This parameter defines the reference state that is used in the buoyancy terms.
    long: ''
  allowed_values:
    - value: 'initial_profile'
      description: |
        The initial vertical potential temperature profile will be used. See [pt_surface](#initialization_parameters--pt_surface) and [pt_vertical_gradient](#initializatin_parameters--pt_vertical_gradient) for how to set the initial profile.

        In case of runs with humidity, the virtual potential temperature will be used instead. See [q_surface](#initialization_parameters--q_surface) and [q_vertical_gradient](#initialization_parameters--q_vertical_gradient) for how to set the initial water vapor mixing ratio profile.

        In ocean mode runs, the in-situ density is used instead of temperature. In-situ density is calculated from the initial potential temperature and salinity profile. See [sa_surface](#ocean_parameters--sa_surface) and [sa_vertical_gradient](#ocean_parameters--sa_vertical_gradient) for how to set the initial salinity profile.

        In case of [initializing_actions](#initialization_parameters--initializing_actions)= * 'cyclic_fill'*, the main run uses the initial profile of the precursor run.
    - value: 'horizontal_average'
      description: |
        The instantaneous horizontally averaged potential temperature profile will be used. Please be aware that this causes the reference state to change in time. This will increase the mean (horizontally averaged) buoyancy which then triggers a mean vertical velocity and in turn the divergence in the preliminary velocity field will increase in time, but the pressure solver will take care of it and removes any mean vertical velocities.

        In case of runs with humidity, the virtual potential temperature will be used instead. In ocean mode runs, in-situ density is used.
    - value: 'single_value'
      description: |
        A constant single potential temperature value is used as reference state. The respective value can be defined with parameter [pt_reference](#initialization_parameters--pt_reference).

        **Warning:** <br>
        In case of runs with humidity, the virtual potential temperature is used. The reference value is then calculated from [pt_reference](#initialization_parameters--pt_reference) and the surface water vapor mixing ratio [q_surface](#initialization_parameters--q_surface), i.e. it cannot be explicitly set by the user.

        In ocean mode runs, the reference value cannot be explicitly set by the user. Instead, it is calculated as the vertical average of the initial potential density profile.


residual_limit:
  category: Numerics
  type: R
  default:
    value: 1.0E-4
  si-unit: s^-2^m^-3^
  description:
    short: Largest residual permitted for the multigrid scheme.
    long: |
      This is a parameter to steer the accuracy of the multigrid scheme (see [psolver](#initialization_parameters--psolver) = *'multigrid'*). The divergence of the 3D velocity field will be reduced iteratively as long as the calculated residual is greater than [residual_limit](#initialization_parameters--residual_limit). After a maximum number of 1000 iterative cycles, PALM aborts with a corresponding error message.

      The reciprocal value of this parameter can be interpreted as a factor by which the divergence of the provisional velocity field is approximately reduced after the multigrid scheme has been applied (thus, the default value causes a reduction of the absolute value of divergence by approx. 6 orders of magnitude).


restart_data_format:
  category: Input/Output
  type: C*20
  default:
    value: 'fortran_binary'
  description:
    short: Binary format of the input and output restart files.
    long: |
      This parameter can also be used in the `&runtime_parameters` namelist. Parameters [restart_data_format_input](#initialization_parameters--restart_data_format_input) and [restart_data_format_output](#initialization_parameters--restart_data_format_output) allow different formats to be used for input and output.
  allowed_values:
    - value: 'fortran_binary'
      description: |
        Each core (MPI thread) reads/writes its own file in Fortran binary format. I/O transfer rate is highest with this setting, but the large number of files that are generated if many cores are used may sometimes cause problems with parallel file systems (especially the Lustre file system, where hanging situations may appear).
    - value: 'mpi'
      description: |
        I/O of all cores is directed to/from a single file using MPI-I/O. This method can also be used in serial mode (when PALM has been compiled without the `-D__parallel` option). In such a case, restart I/O is carried out using POSIX calls. MPI-I/O shows transfer rates that are a bit smaller than those for Fortran I/O.
    - value: 'mpi_shared_memory'
      description: |
        With this setting, I/O is performed only by a limited number of cores on each of the compute nodes a run is using. With [restart_data_format](#initialization_parameters--restart_data_format) = *'mpi'* each core (MPI thread) writes and reads its relevant data. With [restart_data_format](#initialization_parameters--restart_data_format) = *'mpi_shared_memory'*, only every 4th (or any other multiple integer of the cores per node) reads and writes data and distributes it to the other cores. This is possible since all processes on a node can share their memory. With this, the I/O rates may increase especially for many-core CPUs.

        **Attention:** <br>
        I/O-performance can often be further improved via specific file system settings, e.g. the number of I/O streams assigned to a respective file.


restart_data_format_input:
  category: Input/Output
  type: C*20
  default:
    value_of: '[restart_data_format](#initialization_parameters--restart_data_format)'
  description:
    short: Binary format of the input restart file.
    long: |
      See [restart_data_format](#initialization_parameters--restart_data_format) for allowed values. This parameter can also be used in the `&runtime_parameters` namelist.


restart_data_format_output:
  category: Input/Output
  type: C*20
  default:
    value_of: '[restart_data_format](#initialization_parameters--restart_data_format)'
  description:
    short: Binary format of the output restart file.
    long: |
      See [restart_data_format](#initialization_parameters--restart_data_format) for allowed values. This parameter can also be used in the `&runtime_parameters` namelist.


rotation_angle:
  category: Physics
  type: R
  default:
    value: 0.0
  si-unit: degree
  description:
    short: Rotation angle of the model's North direction relative to geographical North (clockwise rotation).
    long: |
      The rotation angle affects the Coriolis force as well as the solar radiation wihin the model domain. Further, it is used for correct geo-referencing each model grid point to real-world coordinates.

      If a [static driver](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles/pids/static) is used, this parameter will be overwritten by the value given in the static driver.


roughness_length:
  category: Boundary Conditions
  type: R
  default:
    value: 0.1
  si-unit: m
  description:
    short: Roughness length assumed for the surface layer.
    long: |
      The [roughness_length](#initialization_parameters--roughness_length) has to be smaller than the height of the constant flux layer that is used, which is defined by `dz/2`.
      
      The roughness length for scalars can be assigned a value different from the one for momentum (see [z0h_factor](#initialization_parameters--z0h_factor)).

      This parameter is effective only in case that a constant flux layer is switched on at the bottom boundary (see [constant_flux_layer](#initialization_parameters--constant_flux_layer)).


s_surface:
  category: Initial Conditions
  type: R
  default:
    value: 0.0
  si-unit: kg m^-3^ (particles) or ppm (gases)
  description:
    short: Surface concentration of the passive scalar.
    long: |
      This parameter assigns the value of the passive scalar `s` at the surface (`k`=0). Starting from this value, the initial vertical scalar concentration profile is constructed using [s_vertical_gradient](#initialization_parameters--s_vertical_gradient) and [s_vertical_gradient_level](#initialization_parameters--s_vertical_gradient_level).


s_surface_initial_change:
  category: Initial Conditions
  type: R
  default:
    value: 0.0
  si-unit: kg m^-3^ (particles) or ppm (gases)
  description:
    short: Change in surface scalar concentration to be applied at the beginning of the 3d run.
    long: |
      If [s_surface_initial_change](#initialization_parameters--s_surface_initial_change) is set to a non-zero value, the near surface scalar flux is not allowed to be given simultaneously (see [surface_scalarflux](#initialization_parameters--surface_scalarflux)).


s_vertical_gradient:
  category: Initial Conditions
  type: R
  shape: (10)
  default:
    value: 0.0
  si-unit: kg m^-3^ / 100 m (particles) or ppm / 100m (gases)
  description:
    short: Scalar concentration gradient(s) of the initial scalar concentration profile.
    long: |
      The scalar gradient holds starting from the height level defined by [s_vertical_gradient_level](#initialization_parameters--s_vertical_gradient_level) (precisely: for all uv levels `k` where `zu(k)` > [s_vertical_gradient_level](#initialization_parameters--s_vertical_gradient_level), `s_init(k)` is set: `s_init(k) = s_init(k-1) + dzu(k) *` [s_vertical_gradient](#initialization_parameters--s_vertical_gradient)) up to the top boundary or up to the next height level defined by [s_vertical_gradient_level](#initialization_parameters--s_vertical_gradient_level). A total of 10 different gradients for 11 height intervals (10 intervals if [s_vertical_gradient_level](#initialization_parameters--s_vertical_gradient_level)(1) = *0.0*) can be assigned. The surface scalar value is assigned via [s_surface](#initialization_parameters--s_surface).

      **Example:**<br>
      [s_vertical_gradient](#initialization_parameters--s_vertical_gradient) = *0.1*, *0.05*,<br>
      [s_vertical_gradient_level](#initialization_parameters--s_vertical_gradient_level) = *500.0*, *1000.0*, <br>
      defines the scalar concentration to be constant with height up to z = 500.0 m with a value given by [s_surface](#initialization_parameters--s_surface). For 500.0 m < z <= 1000.0 m the scalar gradient is 0.1 kg m^-3^ / 100 m and for z > 1000.0 m up to the top boundary it is 0.05 kg m^-3^ / 100 m (it is assumed here that the assigned height levels correspond with uv levels).


s_vertical_gradient_level:
  category: Initial Conditions
  type: R
  shape: (10)
  default:
    value: ~
  si-unit: m
  description:
    short: Height level from which on the scalar gradient defined by [s_vertical_gradient](#initialization_parameters--s_vertical_gradient) is effective.
    long: |
      The height levels are to be assigned in ascending order. The default values result in a scalar concentration constant with height regardless of the values of [s_vertical_gradient](#initialization_parameters--s_vertical_gradient) (unless the top boundary of the model is higher than 100000.0 m). For the piecewise construction of scalar concentration profiles see [s_vertical_gradient](#initialization_parameters--s_vertical_gradient).


scalar_advec:
  category: Numerics
  type: C*16
  default:
    value: 'ws-scheme'
  description:
    short: Advection scheme to be used for the scalar quantities.
    long: ''
  allowed_values:
    - value: 'ws-scheme'
      description: |
        The 5^th^ order upwind scheme of Wicker and Skamarock (2002, Mon. Wea. Rev, 130, 2088-2097). The 5^th^ order scheme implies a small numerical dissipation that stabilizes the solution. To assure a stable numerical solution, [timestep_scheme](#initialization_parameters--timestep_scheme) = *'runge-kutta-3'* has to be used. The Wicker-Skamarock scheme is based on on the advection term given in flux form, which requires the flow to be free of divergence, else a stable numerical solution is not guaranteed. Therefore, [call_psolver_at_all_substeps](#initialization_parameters--call_psolver_at_all_substeps) = *.T.* should be set. The dispersion of this scheme error is much smaller than the dispersion error of the *'pw-scheme'*.

        The calculation of turbulent fluxes takes place inside the advection routines to get results that are consistent with the numerical solution.

        **Note:** Due to the larger numerical stencil of this scheme, vertical grid stretching should be handled with care.
    - value: 'pw-scheme'
      description: |
         The scheme of Piacsek and Williams (1970, J. Comp. Phys., 6, 392-405) with central finite differences in the form C3 is used.

         **Note:** Compared with the *'ws-scheme'*, this scheme usually shows much stronger numerical dispersion. It is not recommended to be used in general.
    - value: 'bc-scheme'
      description: |
        The Bott scheme modified by Chlond (1994, Mon. Wea. Rev., 122, 111-125). This is a conservative monotonous scheme with very small numerical diffusion and therefore very good conservation of scalar flow features. The scheme, however, is computationally very expensive, both because it is expensive itself and because it does (so far) not allow specific code optimizations (e.g. cache optimization). Choice of this scheme forces the Euler time step scheme to be used for the scalar quantities. For output of horizontally averaged profiles of the resolved / total heat flux, [data_output_pr](#runtime_parameters--data_output_pr) = *'w*theta*BC'* / *'wthetaBC'* should be used, instead of the standard profiles (*'w*theta*'* and *'wtheta'*) because these are too inaccurate with this scheme. However, for subdomain analysis (see [statistic_regions](#initialization_parameters--statistic_regions)) exactly the reverse holds: here *'w*theta*BC'* and *'wthetaBC'* show very large errors and should not be used.

        This scheme is not allowed for non-cyclic lateral boundary conditions (see [bc_lr](#initialization_parameters--bc_lr) and [bc_nc](#initialization_parameters--bc_nc)) and requires [loop_optimization](#initialization_parameters--loop_optimization) = *'vector'*.

scalar_rayleigh_damping:
  category: Numerics
  type: L
  default:
    value: .T.
    depends_on: ~
    value_of: ~
  description:
    short: Application of Rayleigh damping to scalars.
    long: |
      With Rayleigh damping switched on (see [rayleigh_damping_factor](#initialization_parameters--rayleigh_damping_factor)), this parameter determines if the damping is applied also to scalars (temperature, humidity/scalar, salinity) or to the horizontal velocity components only.


spinup_time:
  category: Initial Conditions
  type: R
  si-unit: s
  default:
    value: 0.0
    depends_on: ~
    value_of: ~
  description:
    short: Parameter for steering the length of the soil/wall spinup phase.
    long: |
      The soil/wall spinup allows for the adjustment of the inert soil- and wall-layer temperatures to the prevailing atmospheric conditions, prior to the actual 3D atmosphere simulation. This saves a significant amount of computational time because during the spinup phase, the soil and wall models run without an interactive atmosphere.

      Currently, this mechanism is implemented for the land surface and the urban surface model. In the spinup phase, these models predict the skin and soil/wall temperatures. All window temperatures (surface and deeper layers) are not calculated during spinup. For using the spinup mechanism it is required to have a radiation model activated. Forcing is achieved by radiation and optionally a varying near-surface air temperature (steered via [spinup_pt_mean](#initialization_parameters--spinup_pt_mean), [spinup_pt_amplitude](#initialization_parameters--spinup_pt_amplitude), and the incoming solar radiation. After completion of the spinup, the atmospheric code is switched on and runs coupled to the surface models. On the timeline, the spinup phase has negative times counting towards 0 s, which is when the atmosphere is activated.

      Note that the near-surface temperatures are reset after the spinup to their initial values prescribed by the user. The spinup mechanism can be steered via the additional parameters [dt_spinup](#initialization_parameters--dt_spinup) and [data_output_during_spinup](#initialization_parameters--data_output_during_spinup).


spinup_pt_amplitude:
  category: Initial Conditions
  type: R
  si-unit: K
  default:
    value: 0.0
    depends_on: ~
    value_of: ~
  description:
    short: |
      Representative amplitude of the diurnal near-surface temperature variation during the spinup phase (see [spinup_time](#initialization_parameters--spinup_time)).
    long: |
      Note that this amplitude does not match the true temperature amplitude during spinup. The true amplitude depends also on the incoming shortwave radiation and thus depends on the day of the year and the geographic location.


spinup_pt_mean:
  category: Initial Conditions
  type: R
  si-unit: K
  default:
    value_of: '[pt_surface](#initialization_parameters--pt_surface)'
  description:
    short: Mean near-surface air temperature during the spinup phase (see [spinup_time](#initialization_parameters--spinup_time)).
    long: |
      If no value is provided, the mean will be inferred from the setting of [pt_surface](#initialization_parameters--pt_surface).


statistic_regions:
  category: Others
  type: I
  default:
    value: 0
    depends_on: ~
    value_of: ~
  description:
    short: Number of additional user-defined subdomains for which statistical analysis and corresponding output (profiles, time series) shall be made.
    long: |
      By default, vertical profiles and other statistical quantities are calculated as horizontal and/or volume average of the total model domain. Beyond that, these calculations can also be carried out for subdomains which can be defined using the array `rmask` within the user-defined software (see [user-defined domains](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/userint/subd)). The number of these subdomains is determined with the parameter [statistic_regions](#initialization_parameters--statistic_regions). Maximum 9 additional subdomains are allowed. The parameter [region](#user_parameters--region) can be used to assign names (identifier) to these subdomains which are then used in the headers of the output files and plots.

      Data for the total domain and all defined subdomains are output to the same file(s) ([DATA_1D_PR_NETCDF](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#DATA_1D_PR_NETCDF), [DATA_1D_TS_NETCDF](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#DATA_1D_TS_NETCDF)). In case of [statistic_regions](#initialization_parameters-statistic_regions) > 0, data for the different domains can be distinguished by a suffix which is appended to the quantity names. Suffix 0 means data for the total domain, suffix 1 means data for subdomain 1, etc.


subs_vertical_gradient:
  category: Initial Conditions
  shape: (10)
  type: R
  si-unit: m s^-1^ / 100 m
  default:
    value: 0.0
    depends_on: ~
    value_of: ~
  description:
    short: Vertical gradient(s) of the profile for the large-scale subsidence/ascent velocity.
    long: |
      This gradient holds starting from the height level defined by [subs_vertical_gradient_level](#initialization_parameters--subs_vertical_gradient_level) (precisely: for all uv levels `k` where `zu(k)` > [subs_vertical_gradient_level](#initialization_parameters--subs_vertical_gradient_level), `w_subs(k)` is set: `w_subs(k) = w_subs(k-1) + dzu(k) *` [subs_vertical_gradient](#initialization_parameters--subs_vertical_gradient)) up to the top boundary or up to the next height level defined by [subs_vertical_gradient_level](#initialization_parameters--subs_vertical_gradient_level). A total of 10 different gradients for 11 height intervals (10 intervals if [subs_vertical_gradient_level](#initialization_parameters--subs_vertical_gradient_level)(1) = *0.0*) can be assigned.

      **Example:** <br>
      [subs_vertical_gradient](#initialization_parameters--subs_vertical_gradient) = *-0.002*, *0.0*, <br>
      [subs_vertical_gradient_level](#initialization_parameters--subs_vertical_gradient_level) = *0.0*, *1000.0*

      defines the subsidence/ascent profile to be linear up to z = 1000.0 m with a surface value of 0 m/s. Due to the gradient of -0.002 m s^-1^ / 100 m the subsidence velocity has a value of -0.02 m s^-1^ in z = 1000.0 m. For z > 1000.0 m up to the top boundary the gradient is 0.0 m s^-1^ / 100 m (it is assumed that the assigned height levels correspond with uv levels). This results in a subsidence velocity of -0.02 m s^-1^ at the top boundary.

      With an appropriate construction of `w_subs`, the boundary layer height $z_i$ can be kept approximately constant.


subs_vertical_gradient_level:
  category: Initial Conditions
  shape: (10)
  type: R
  si-unit: m
  default: 0.0
  description:
    short:  Height level from which on the gradient for the subsidence/ascent velocity defined by [subs_vertical_gradient](#initialization_parameters--subs_vertical_gradient) is effective.
    long: |
      The height levels have to be assigned in ascending order. The default values result in a profile which is zero everywhere regardless of the values of [subs_vertical_gradient](#initialization_parameters--subs_vertical_gradient). For the piecewise construction of the subsidence/ascent velocity profile see [subs_vertical_gradient](#initialization_parameters--subs_vertical_gradient).

surface_heatflux:
  category: Boundary Conditions
  type: R
  si-unit: depends on '[flux_input_mode]{#initialization_parameters--flux_input_mode)'
  default:
    value: ~
    depends_on: ~
    value_of: ~
  description:
    short: Sensible heat flux at the bottom surface.
    long: |
      If a value is assigned to this parameter, the internal surface heat flux array `surf%shf` is initialized with the value of [surface_heatflux](#initialization_parameters--surface_heatflux) as the bottom (horizontally homogeneous) boundary condition for the temperature equation. This additionally requires that a Neumann condition must be used for the potential temperature (see [bc_pt_b](#initialization_parameters--bc_pt_b)), because otherwise the resolved scale may contribute to the surface flux so that a constant value cannot be guaranteed. Also, changes of the surface temperature (see [pt_surface_initial_change](#initialization_parameters--pt_surface_initial_change)) are not allowed when [surface_heatflux](#initialization_parameters--surface_heatflux) is given. The parameter [random_heatflux](#initialization_parameters--random_heatflux) can be used to impose random perturbations on the (homogeneous) surface heat flux.

      In case of a non-flat topography, the internal surface heat flux `surf%shf` is initialized with the value of [surface_heatflux](#initialization_parameters--surface_heatflux) at the bottom surface and [wall_heatflux](#initialization_parameters--wall_heatflux)(0) at the topography top face. The parameter [random_heatflux](#initialization_parameters--random_heatflux) can be used to impose random perturbations on this combined surface heat flux.

      If no surface heat flux is assigned, it is calculated at each time step by $u_* \theta_*$ (when [constant_flux_layer](#initialization_parameters--constant_flux_layer) is switched on). Here, $u_*$ and $\theta_*$ are calculated from Monin-Obukhov similarity theory assuming logarithmic wind and temperature profiles between k=0 and k=1. In this case, a Dirichlet condition (see [bc_pt_b](#initialization_parameters--bc_pt_b) must be used as bottom boundary condition for the potential temperature.

      Non-zero values must not be given for [surface_heatflux](#initialization_parameters--surface_heatflux) in case of simulations with pure neutral stratification (see parameter [neutral](#initialization_parameters--neutral)).

      [surface_heatflux](#initialization_parameters--surface_heatflux) is allowed to be set as runtime parameter as well. In case of a restart run, it then overwrites the setting from the previous run and the new value will be used for further restarts, as long as no new setting via the runtime parameter namelist is made.

      See also [top_heatflux](#initialization_parameters--top_heatflux).

      **Note:**
      Depending on [flux_input_mode](#initialization_parameters--flux_input_mode), the value of [surface_heatflux](#initialization_parameters--surface_heatflux) has to be given either in unit K ms^-1^ (kinematic flux), or in W m^-2^.

      **Attention:**
      If the constant flux layer has been switched off ([constant_flux_layer](#initialization_parameters--constant_flux_layer) = *.F.*), setting of [surface_heatflux](#initialization_parameters--surface_heatflux) requires setting of [use_surface_fluxes](#initialization_parameters--use_surface_fluxes) = *.T.*.


surface_pressure:
  category: Initial Conditions
  type: R
  si-unit: hPa
  default:
    value: 1013.25
    depends_on: ~
    value_of: ~
  description:
    short: Atmospheric pressure at the surface.
    long: |
      Starting from this surface value, the vertical pressure profile is calculated once at the beginning of the run assuming a neutrally stratified atmosphere. This is needed for converting between the liquid water potential temperature and the potential temperature (see [bulk_cloud_model](#bulk_cloud_parameters--bulk_cloud_model) = *.T.*).


surface_scalarflux:
  category: Boundary Conditions
  type: R
  si-unit: kg m<sup>-2</sup> s<sup>-1</sup> (particle flux) or ppm m s<sup>-1</sup> (gaseous flux)
  default:
    value: ~
    depends_on: ~
    value_of: ~
  description:
    short: Scalar flux at the surface.
    long: |
      If a value is assigned to this parameter, the respective scalar flux value is used as bottom (horizontally homogeneous) boundary condition for the scalar concentration equation. This additionally requires that a Neumann condition must be used for the scalar concentration (see [bc_s_b](#initialization_parameters--bc_s_b)), because otherwise the resolved scale may contribute to the surface flux so that a constant value cannot be guaranteed. Also, changes of the surface scalar concentration (see [s_surface_initial_change](#initialization_parameters--s_surface_initial_change)) are not allowed.

      If no surface scalar flux is assigned, it is calculated at each time step by $u_* s_*$ (of course only with [constant_flux_layer](#initialization_parameters--constant_flux_layer) switched on). Here, $s_*$ is calculated from Monin-Obukhov similarity theory assuming a logarithmic scalar concentration profile between k=0 and k=1. In this case, a Dirichlet condition (see [bc_s_b](#initialization_parameters--bc_s_b)) must be used as bottom boundary condition for the scalar concentration.


surface_waterflux:
  category: Boundary Conditions
  type: R
  si-unit: kg kg<sup>-1</sup> m s<sup>-1</sup>
  default:
    value: ~
    depends_on: ~
    value_of: ~
  description:
    short: Kinematic water flux near the surface.
    long: |
      If a non-zero value is assigned to this parameter, the respective water flux value is used as bottom (horizontally homogeneous) boundary condition for the humidity equation. This additionally requires that a Neumann condition must be used for the water vapor / total water mixing ratio (see [bc_q_b](#initialization_parameters--bc_q_b)), because otherwise the resolved scale may contribute to the surface flux so that a constant value cannot be guaranteed. Also, changes of the surface humidity (see [q_surface_initial_change](#initialization_parameters--q_surface_initial_change)) are not allowed.

      If no surface water flux is assigned, it is calculated at each time step by $u_*  q_*$ (of course only with a constant flux layer switched on). Here, $q_*$ is calculated from Monin-Obukhov similarity theory assuming a logarithmic temperature profile between k=0 and k=1. In this case, a Dirichlet condition (see [bc_q_b](#initialization_parameters--bc_q_b)) must be used as the bottom boundary condition for the humidity.


terrain_following_mapping:
  category: Topography
  type: L
  default:
    value: .F.
  description:
    short: Parameter to enable simulations featuring terrain-following mapping of profile data in combination with cyclic-fill initialization.
    long:  |
       If the simulation is initialized using the cyclic fill method (see [initializing_actions](#initialization_parameters--initializing_actions) = *'cyclic_fill'* ), [terrain_following_mapping](#initialization_parameters--terrain_following_mapping) = *.T.* shifts the initial 3d-arrays vertically depending on the local surface height of each horizontal grid point, i.e. the initial 3d-arrays are mapped in a terrain-following way.

       Furthermore, in case of [terrain_following_mapping](#initialization_parameters--terrain_following_mapping) = *.T.* the mean inflow profiles as used by the turbulence recycling method (see [turbulent_inflow_method](#turbulent_inflow_parameters--turbulent_inflow_method)) are also shifted vertically with respect to the topography height at the inflow / recycling plane. For this, the topography height must be constant along the entire inflow / recycling plane.

       [terrain_following_mapping](#initialization_parameters--terrain_following_mapping) = *.T.* does not allow to use vertical grid stretching. Furthermore, the topography mode must be set to *'read_from_file'* (see [topography](#initialization_parameters--topography)).


timestep_scheme:
  category: Numerics
  type: C*20
  default:
    value: 'runge-kutta-3'
    depends_on: ~
    value_of: ~
  description:
    short: Time step scheme to be used for the integration of the prognostic variables.
    long: |
      Independent from [timestep_scheme](#initialization_parameters--timestep_scheme) a different time step scheme can be chosen for the subgrid-scale TKE using parameter [use_upstream_for_tke](#initialization_parameters--use_upstream_for_tke).
  allowed_values:
    - value: 'runge-kutta-3'
      description: |
        Third order Runge-Kutta scheme. <br>
        For further information see [here](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/rk3).
    - value: 'runge-kutta-2'
      description: |
        Second order Runge-Kutta scheme. <br>
        Not allowed for [momentum_advec](#initialization_parameters--momentum_advec) = *'ws-scheme'* or [scalar_advec](#initialization_parameters--scalar_advec) = *'ws-scheme'*.
        For further information see [here](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/rk3).
    - value: 'euler'
      description: |
        First order Euler scheme. <br>
        Not allowed for [momentum_advec](#initialization_parameters--momentum_advec) = *'ws-scheme'* or [scalar_advec](#initialization_parameters--scalar_advec) = *'ws-scheme'*.


topography:
  category: Topography
  type: C*40
  default:
    value: 'flat'
    depends_on: ~
    value_of: ~
  description:
    short: Topography mode.
    long: |
      Alternatively to the available Topography modes explained below, the user may add code to the user interface subroutine [user_init_grid](https://palm.muk.uni-hannover.de/trac/browser/palm/trunk/SOURCE/user_init_grid.f90) to allow further topography modes. These require to explicitly set the [topography_grid_convention](#initialization_parameters-topography_grid_convention) to either *'cell_edge'* or *'cell_center'* .

      Non-flat topography modes allow to assign a sensible [wall_heatflux](#initialization_parameters--wall_heatflux), a [wall_humidityflux](#initialization_parameters--wall_humidityflux) (requires [humidity](#initialization_parameters--humidity) = *.T.*), or a [wall_scalarflux](#initialization_parameters--wall_scalarflux) (requires [passive_scalar](#initialization_parameters--passive_scalar) = *.T.*) at the five topography faces using the respective parameters.

      All non-flat topography modes require the use of [psolver](#initialization_parameters--psolver) /= *'sor'* , [alpha_surface](#initialization_parameters--alpha_surface) = *0.0*, [galilei_transformation](#initialization_parameters--galilei_transformation) = *.F.*, [cloud_droplets](#initialization_parameters--cloud_droplets) = *.F.* (has not been tested), and [constant_flux_layer](#initialization_parameters--constant_flux_layer) = *.T.* (except closed channel flow).

      **Note:** <br>
      The given topography is internally filtered so that surfaces with a distance of only one grid point (e.g. small street canyons) are filled up to the minimum topography height of the directly adjoining grid points along the x- and the y-direction. This is necessary, because for such poorly resolved features, the continuity equation is not fulfilled on a discrete grid, as the degree of freedom for the pressure solver is insufficient. Such `holes` are suspected to lead to unrealistic velocity blow-ups, hence, they are filled up.

      Note that an inclined model domain requires the use of [topography](#initialization_parameters--topography) = *'flat'* and a nonzero [alpha_surface](#initialization_parameters--alpha_surface).
  allowed_values:
    - value: 'flat'
      description: |
        Flat surface. The surface is assumed to be at grid index `k` = 0.

    - value: 'single_building'
      description: |
        Flow around a single rectangular building mounted on an otherwise flat surface. The building size and location can be specified by the parameters [building_height](#initialization_parameters--building_height), [building_length_x](#initialization_parameters--building_length_x), [building_length_y](#initialization_parameters--building_length_y), [building_wall_left](#initialization_parameters--building_wall_left) and [building_wall_south](#initialization_parameters--building_wall_south).

    - value: 'single_street_canyon'
      description: |
        Flow over a single, quasi-2D street canyon of infinite length oriented either along x- or along y-direction. The canyon size, orientation, and location can be specified by the parameters [canyon_height](#initialization_parameters--canyon_height) plus either [canyon_width_x](#initialization_parameters--canyon_width_x) and [canyon_wall_left](#initialization_parameters--canyon_wall_left) or [canyon_width_y](#initialization_parameters--canyon_width_y) and [canyon_wall_south](#initialization_parameters--canyon_wall_south).

    - value: 'read_from_file'
      description: |
        Arbitrary topography. This mode requires the input file [TOPOGRAPHY_DATA](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#TOPOGRAPHY_DATA), which contains the arbitrary topography height at each horizontal grid point in m (LOD2), or information about which of the model grid points is filled with topography/buildings (LOD3). These data must exactly match PALM's grid, except topography heights (LOD2), which are rounded to the nearest vertical PALM grid level.

    - value: 'tunnel'
      description: |
        Flow within a tunnel of finite or infinite length oriented either along x- or along y-direction. The height of the tunnel outer top wall can be specified by [tunnel_height](#initialization_parameters--tunnel_height). The tunnel length and width can be specified via [tunnel_length](#initialization_parameters--tunnel_length) and either [tunnel_width_x](#initialization_parameters--tunnel_width_x) or [tunnel_width_y](#initialization_parameters--tunnel_width_y). Furthermore, the depth of tunnel walls can be specified by [tunnel_wall_depth](#initialization_parameters--tunnel_wall_depth). Note that tunnels are always centered in the model domain along x- or y-direction.

    - value: 'closed_channel'
      description: |
        Flow within a closed channel with walls at both the lower boundary at `k=0` (for `w` and scalars) and the upper boundary at `k=nzt` (fow `w`) and `k=nzt+1` (for scalars). Note that PALM's default grid structure (see [spatial discretization](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/discret#Spatialdiscretization)) is modified in a closed channel so that `w(k=nzt)` and `scalar(k=nzt+1)` are defined at the same height, because investigating such a flow requires a symmetric model domain along z. *'closed_channel'* requires [constant_flux_layer](#initialization_parameters--constant_flux_layer) = *.T.*. and [momentum_advec](#initialization_parameters--momentum_advec) = [scalar_advec](#initialization_parameters--scalar_advec) = *'ws-scheme'*. Grid stretching along z and ocean mode are not allowed.


topography_grid_convention:
  category: Topography
  type: C*11
  default:
    depends_on: value of [topography](#initialization_parameters--topography)
  description:
    short: Convention for defining the topography grid.
    long: |
      This parameter only needs to be used for [topography](#initialization_parameters--topography) /= *'read_from_file'*.
      The default value is *'cell_edge'*, if [topography](#initialization_parameters--topography) = *'single_building'* or *'single_street_canyon'*,
      and *'cell_center'* if [topography](#initialization_parameters--topography) = *'read_from_file'*, or *'tunnel'*. For simulation setups using a user-defined topography, [topography_grid_convention](#initialization_parameters--topography_grid_convention) must be explicitly set to either *'cell_edge'* or *'cell_center'*.
  allowed_values:
    - value: 'cell_edge'
      description: |
        The distance between cell edges defines the extent of topography. This setting is normally used for generic topographies, i.e. topographies that are constructed using length parameters. For example, [topography](#initialization_parameters--topography) = *'single_building'* is constructed using [building_length_x](#initialization_parameters--building_length_x) and [building_length_y](#initialization_parameters--building_length_y). The advantage of this setting is that the actual size of generic topography is independent of the grid size, provided that the length parameters are an integer multiple of the grid lengths [dx](initialization_parameters--dx) and [dy](#initialization_parameters--dy). This is convenient for resolution parameter studies.

    - value: 'cell_center'
      description: |
        The number of topography cells defines the extent of topography. This setting is normally for rastered real topographies derived from digital elevation models. For example, [topography](#initialization_parameters--topography) = *'read_from_file'* is constructed using the input file [TOPOGRAPHY_DATA](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#TOPOGRAPHY_DATA). The advantage of this setting is that the rastered topography cells of the input file are directly mapped to PALM's topography grid boxes.


top_heatflux:
  category: Boundary Conditions
  type: R
  si-unit: depends on '[flux_input_mode]{#initialization_parameters--flux_input_mode)'
  default:
    value: ~
  description:
    short: Kinematic sensible heat flux at the top boundary.
    long: |
      If a value is assigned to this parameter, the top boundary sensible heat flux is initialized with the value of [top_heatflux](#initialization_parameters--top_heatflux) as the top (horizontally homogeneous) boundary condition for the temperature equation. This additionally requires that a Neumann condition must be used for the potential temperature (see [bc_pt_t](#initialization_parameters--bc_pt_t)), because otherwise the resolved scale may contribute to the top flux so that a constant flux value cannot be guaranteed.

      The application of a top heat flux additionally requires the setting of initial parameter [use_top_fluxes](#initialization_parameters--use_top_fluxes) = *.T.*.

      No constant flux layer is available at the top boundary so far.

      Non-zero values must not be given for top_heatflux in case of simulations with pure neutral stratification (see parameter [neutral](#initialization_parameters--neutral).

      See also [surface_heatflux](#initialization_parameters--surface_heatflux).

      **Note:**
      Depending on [flux_input_mode](#initialization_parameters--flux_input_mode), the value of [top_heatflux](#initialization_parameters--top_heatflux) has to be given either in unit K ms^-1^ (kinematic flux), or in W m^-2^.


top_momentumflux_u:
  category: Boundary Conditions
  type: R
  si-unit: m<sup>2</sup> s<sup>-2</sup>
  default:
    value: ~
  description:
    short:  Vertical momentum flux of `u` at the top boundary.
    long: |
      The respective grid points at the top boundary are initialized with the value of [top_momentumflux_u](#initialization_parameters--top_momentumflux_u) as the top (horizontally homogeneous) boundary condition for the u-momentum equation. Data is stored within the internal surface data array `surf%usws`.

      The application of a top momentum flux additionally requires the setting of initialization parameter [use_top_fluxes](#initialization_parameters--use_top_fluxes) = *.T.*. Setting of [top_momentumflux_u](#initialization_parameters--top_momentumflux_u) requires setting of [top_momentumflux_v](#initialization_parameters--top_momentumflux_v), too.

      A Neumann condition should be used for the `u` velocity component (see [bc_uv_t](#initialization_parameters--bc_uv_t)), because otherwise the resolved scale may contribute to the top flux so that a constant flux value cannot be guaranteed.

      No constant flux layer is available at the top boundary so far.

      The coupled ocean parameter file [PARIN_O](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#PARIN_O) should include dummy assignments to both [top_momentumflux_u](#initialization_parameters--top_momentumflux_u) and [top_momentumflux_v](#initialization_parameters--top_momentumflux_v) (e.g. [top_momentumflux_u](#initialization_parameters--top_momentumflux_u) = *0.0*, [top_momentumflux_v](#initialization_parameters--top_momentumflux_v) = *0.0*) to enable the momentum flux coupling.


top_momentumflux_v:
  category: Boundary Conditions
  type: R
  si-unit: m<sup>2</sup> s<sup>-2</sup>
  default:
    value: ~
  description:
    short:  Vertical momentum flux of `v` at the top boundary.
    long: |
      The respective grid points at the top boundary are initialized with the value of [top_momentumflux_v](#initialization_parameters--top_momentumflux_v) as the top (horizontally homogeneous) boundary condition for the v-momentum equation. Data is stored within the internal surface data array `surf%vsws`.

      The application of a top momentum flux additionally requires the setting of initialization parameter [use_top_fluxes](#initialization_parameters--use_top_fluxes) = *.T.*. Setting of [top_momentumflux_v](#initialization_parameters--top_momentumflux_v) requires setting of [top_momentumflux_u](#initialization_parameters--top_momentumflux_u), too.

      A Neumann condition should be used for the `v` velocity component (see [bc_uv_t](#initialization_parameters--bc_uv_t)), because otherwise the resolved scale may contribute to the top flux so that a constant flux value cannot be guaranteed.

      No constant flux layer is available at the top boundary so far.

      The coupled ocean parameter file [PARIN_O](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#PARIN_O) should include dummy assignments to both [top_momentumflux_u](#initialization_parameters--top_momentumflux_u) and [top_momentumflux_v](#initialization_parameters--top_momentumflux_v) (e.g. [top_momentumflux_u](#initialization_parameters--top_momentumflux_u) = *0.0*, [top_momentumflux_v](#initialization_parameters--top_momentumflux_v) = *0.0*) to enable the momentum flux coupling.


top_scalarflux:
  category: Boundary Conditions
  type: R
  si-unit: kg m<sup>-2</sup> s<sup>-1</sup> (particle flux) or ppm m s<sup>-1</sup> (gaseous flux)
  default:
    value: ~
  description:
    short:  Vertical scalar flux at the top boundary.
    long: |
      The respective grid points at the top boundary are initialized with the value of [top_scalarflux](#initialization_parameters--top_scalarflux) as the top (horizontally homogeneous) boundary condition for the scalar equation. Data is stored within the internal surface data array `surf%ssws`.

      The application of a top scalar flux additionally requires the setting of initialization parameter [use_top_fluxes](#initialization_parameters--use_top_fluxes) = *.T.*.

      A Neumann condition should be used for the scalar (see [bc_s_t](#initialization_parameters--bc_s_t)), because otherwise the resolved scale may contribute to the top flux so that a constant flux value cannot be guaranteed.

      No constant flux layer is available at the top boundary so far.


tunnel_height:
  category: Topography
  type: R
  si-unit: m
  default:
    value_of: 'zw(INT(0.2*nz))'
  description:
    short: Height of the tunnel (outer wall).
    long: |
      Parameter comes into effect only in case of [topography](#initialization_parameters--topography) = *'tunnel'*.


tunnel_length:
  category: Topography
  type: R
  si-unit: m
  default:
    value: 9999999.9
    depends_on: ~
    value_of: ~
  description:
    short: Length of the tunnel.
    long: |
      Parameter comes into effect only in case of [topography](#initialization_parameters--topography) = *'tunnel'*.

      [tunnel_length](#initialization_parameters--tunnel_length) can be smaller (open tunnel) or larger (infinite tunnel) than the extension of the model domain along the tunnel axis.


tunnel_wall_depth:
  category: Topography
  type: R
  si-unit: m
  default:
    value_of: 'MAX(dx, dy, dz)'
  description:
    short: Depth of the tunnel walls.
    long: |
      Parameter comes into effect only in case of [topography](#initialization_parameters--topography) = *'tunnel'*.


tunnel_width_x:
  category: Topography
  type: R
  si-unit: m
  default:
    value: ~
  description:
    short: Width of the tunnel along x-direction with respect to the tunnel outer walls.
    long: |
      Parameter comes into effect only in case of [topography](#initialization_parameters--topography) = *'tunnel'*.

      If parameter is set, it indicates a tunnel orientation along `x`. The tunnel width must be at least larger than 2 * [dx](#initialization_parameters--dx) + 2 * [tunnel_wall_depth](#initialization_parameters--tunnel_wall_depth).


tunnel_width_y:
  category: Topography
  type: R
  si-unit: m
  default:
    value: 9999999.9
    depends_on: ~
    value_of: ~
  description:
    short: Width of the tunnel along y-direction with respect to the tunnel outer walls.
    long: |
      Parameter comes into effect only in case of [topography](#initialization_parameters--topography) = *'tunnel'*.

      If parameter is set, it indicates a tunnel orientation along `y`. The tunnel width must be at least larger than 2 * [dy](#initialization_parameters--dy) + 2 * [tunnel_wall_depth](#initialization_parameters--tunnel_wall_depth).


turbulence_closure:
  category: Numerics
  type: C*20
  default:
    value: '1.5-order'
  description:
    short: Parameter to choose between different turbulence closures.
    long: " "
  allowed_values:
    - value: '1.5-order'
      description: |
        Turbulence closure according to a modified version of Deardorff`s subgrid-scale model (Deardorff 1980, Moeng & Wyngaard, 1988) as described by Saiki et al. (2000). See details in the [documentation](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/sgs#deardorff-sgs).

    - value: '1.5-order-dai'
      description: |
        Turbulence closure according to a modified version of Deardorffs subgrid-scale model described by Dai et al. (2020). The implementation is still not thoroughly tested and should be used with extra care. See details in the [documentation](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/sgs#deardorff-sgs-mod).

    - value: 'dynamic'
      description: |
        Use a dynamic subgrid-scale model according to Germano et al. (1991) and Heinz (2008). See details in the [documentation](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/sgs#Dynamicsubgrid-scalemodel).

    - value: 'tke-l'
      description: |
        Turbulence closure utilising the Prandtl-Kolmogorov relation. See details in the [documentation](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/turbulence_parameterization#tkel_model).

        This option puts PALM into RANS mode.

    - value: 'tke-e'
      description: |
        Standard TKE-e closure for Reynolds-averaged Navier-Stokes equations. The used constants can be changed using parameters [rans_const_c](#initialization_parameters--rans_const_c) and [rans_const_sigma](#initialization_parameters--rans_const_sigma). See details in the [documentation](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/turbulence_parameterization#tkee_model).

        This option puts PALM into RANS mode.

turbulent_outflow:
  category: Boundary Conditions
  type: L
  default:
    value: .F.
  description:
    short: Parameter to switch on a turbulent outflow boundary condition.
    long: |
      This outflow condition works technically similar to the turbulent recycling method at the inflow, but always instantaneous (not turbulent fluctuations) values of  `u`, `v`, `w`, `pt`, `q`, `s`, and `e` are copied from a vertical source plane (see [outflow_source_plane](#initialization_parameters--outflow_source_plane)) from inside the domain to the outflow boundary. This prevents numerical errors which can occur if negative velocity values appear at (and normal to) the outflow boundary while using the radiation boundary condition.

      For using this outflow method [bc_lr](#initialization_parameters--bc_lr) = *'dirichlet/radiation'* is required. It can only be used for an outflow boundary at the right model boundary, so far.

      The vertical source plane should be placed not too close to the outflow boundary. This method replaces the radiation boundary condition at the outflow.


u_bulk:
  category: Mode
  type: R
  si-unit: m s^-1^
  default:
    value: 0.0
  description:
    short: u-component of predefined bulk velocity.
    long: |
      This parameter comes into effect if [conserve_volume_flow](#initialization_parameters--conserve_volume_flow) = *.T.* and [conserve_volume_flow_mode](#initialization_parameters--conserve_volume_flow_mode) = *'bulk_velocity'*.


u_profile:
  category: Initial Conditions
  shape: (200)
  type: R
  si-unit: ms^-1^
  default:
    value: ~
  description:
    short: Values of u-velocity component to be used as initial profile.
    long: |
      The corresponding height levels have to be provided by parameter [uv_heights](#initialization_parameters--uv_heights). You need to give values for each of the height levels that are defined via [uv_heights](#initialization_parameters--uv_heights). The first velocity value always has to be assigned to the surface and must be zero, i.e. [u_profile](#initialization_parameters--u_profile)(1) = *0.0*. Velocity values at the model grid levels are calculated from the given values/heights by linear interpolation. If the uppermost value is given for a height smaller than the domain height, this value will be used for all grid points above this level. In runs with non-cyclic horizontal boundary conditions this profile will be used as fixed mean inflow profile.

      **Note:**
      Simultaneous use of forcing by geostrophic wind is not allowed, since this could lead to inconsistencies in the flow forcing. Hence, [omega](#initialization_parameters--omega) = *0.0* must be set when using [u_profile](#initialization_parameters--u_profile) and [v_profile](#initialization_parameters--v_profile). The latter flow forcing is typically used for simulating wind-tunnel applications (where the effect of Coriolis force is negligible) in order to fairly reproduce the measured wind-tunnel profiles within the LES.


ug_surface:
  category: Initial Conditions
  type: R
  si-unit: m s^-1^
  default:
    value: 0.0
    depends_on: ~
    value_of: ~
  description:
    short: u-component of the geostrophic wind at the surface.
    long: |
      This parameter assigns the value of the u-component of the geostrophic wind (`ug`) at the surface (`k=0`). Starting from this value, the initial vertical profile of the u-component of the geostrophic wind is constructed with [ug_vertical_gradient](#initialization_parameters--ug_vertical_gradient) and [ug_vertical_gradient_level](#initialization_parameters--ug_vertical_gradient_level). The profile constructed in that way is used for creating the vertical initial velocity profile of the 3d-model. Either it is applied, as it has been specified by the user ([initializing_actions](#initialization_parameters--initializing_actions) = *'set_constant_profiles'* ) or it is used for calculating a stationary boundary layer wind profile ([initializing_actions](#initialization_parameters--initializing_actions) = *'set_1d-model_profiles'* ).

      In case of a flat surface and cyclic horizontal boundary conditions, and if `ug` is constant with height (i.e. `ug(:)` = [ug_surface](#initialization_parameters--ug_surface)), one may use a Galilei-transformation of the coordinate system to allow for larger time steps (see [galilei_transformation](#initialization_parameters--galilei_transformation)), in order to spare computational resources.

      **Note:**
      In case of ocean mode runs, this parameter gives the u-component of the geostrophic velocity value (i.e. the pressure gradient) at the sea surface, which is at `k=nzt`. The profile is then constructed from the surface down to the bottom of the model.

      **Attention:**
      If the Coriolis force is switched off via [omega](#initialization_parameters--omega) = *0.0*, [ug_surface](#initialization_parameters--ug_surface) is still used for creating the initial wind profile, but of course it can't be called the profile of the geostrophic wind any more!


ug_vertical_gradient:
  category: Initial Conditions
  shape: (10)
  type: R
  si-unit: m s^-1^ / 100 m
  default:
    value: 0.0
  description:
    short: Vertical gradient(s) of the initial profile of the u-component of the geostrophic wind.
    long: |
      The gradient holds starting from the height level defined by [ug_vertical_gradient_level](#initialization_parameters--ug_vertical_gradient_level) (precisely: for all `uv` levels `k` where `zu(k)` > [ug_vertical_gradient_level](#initialization_parameters--ug_vertical_gradient_level), `ug(k)` is set: `ug(k) = ug(k-1) + dzu(k) *` [ug_vertical_gradient](#initialization_parameters--ug_vertical_gradient)) up to the top boundary or up to the next height level defined by [ug_vertical_gradient_level](#initialization_parameters--ug_vertical_gradient_level). A total of 10 different gradients for 11 height intervals can be assigned (10 intervals if [ug_vertical_gradient_level](#initialization_parameters--ug_vertical_gradient_level)(1) = *0.0*). The surface geostrophic wind is assigned by [ug_surface](#initialization_parameters--ug_surface).

      **Note:**
      In case of ocean mode runs, the profile is constructed like described above, but starting from the sea surface (`k=nzt`) down to the bottom boundary of the model. Height levels have then to be given as negative values, e.g. [ug_vertical_gradient_level](#initialization_parameters--ug_vertical_gradient_level) = *-500.0*, *-1000.0*.


ug_vertical_gradient_level:
  category: Initial Conditions
  shape: (10)
  type: R
  si-unit: m
  default:
    value: 0.0
  description:
    short: Height level from which on the gradient defined by [ug_vertical_gradient](#initialization_parameters--ug_vertical_gradient) is effective.
    long: |
      The height levels have to be assigned in ascending order. For the piecewise construction of a profile of the u-component of the geostrophic wind $u_g$ see [ug_vertical_gradient](#initialization_parameters--ug_vertical_gradient).

      **Note:**
      In case of ocean mode runs, the (negative) height levels have to be assigned in descending order.


use_fixed_date:
  category: Geographical Properties
  type: L
  default:
    value: .F.
  description:
    short: Switch to fix the calendar day within a simulation.
    long: |
      If [use_fixed_date](#initialization_parameters--use_fixed_date) = *.T.*, the calendar day does not change during a simulation. When the simulated time reaches 24:00:00 UTC, the time is reset to 00:00:00 UTC without the calendar day being changed. This affects, e.g., the solar position during the simulation.

      **Example:**
      In case of [origin_date_time](#initialization_parameters--origin_date_time) = *'2020-07-15 20:00:00 +00'*, the internal clock after 5h simulated time would be at *'2020-07-15 01:00:00 +00'*.


use_fixed_time:
  category: Geographical Properties
  type: L
  default:
    value: .F.
  description:
    short: Switch to fix the time of day within a simulation.
    long: |
      If [use_fixed_time](#initialization_parameters--use_fixed_time) = *.T.*, the time of day does not change during a simulation, i.e. the internal clock would always show the value set by [origin_date_time](#initialization_parameters-origin_date_time). This results in the sun having a fixed position during the simulation.


use_free_convection_scaling:
  category: Surface Layer Properties
  type: L
  default:
    value: .F.
  description:
    short:  Parameter to switch on the use of the local free convection velocity scale $w_{lfc}$.
    long: |
     When switched on, $w_{lfc}$ is added to the horizontal wind velocity for use in the constant flux layer parameterization to calculate the Obukhov length and the friction velocity $u_*$ over horizontally-aligned surfaces. The horizontal velocity $u_h$ at height of the first vertical grid level $z_\mathrm{mo}$ is then calculated as:

     $$u_\mathrm{h} = \left(u(z_\mathrm{mo})^2 + v(z_\mathrm{mo})^2 + w_\mathrm{lfc}^2\right)^{1/2}$$

     with

     $$w_\mathrm{lfc} = \left( \frac{g}{\theta(z_\mathrm{mo})} * z_\mathrm{mo} * \overline{w'\theta'}_0\right)^{1/3}$$

     This is particularly useful in simulations of convective boundary layers where the local near-surface wind is expected to be close to zero, e.g. in urban environments when the present buildings create spots of stagnant air. $w_{lfc}$ accounts for the dominant eddies close to the surface that cannot be resolved by the LES model and increases $u_h$ by a small amount. When using the land surface scheme, this might prevent the surface sensible heat flux from dropping to zero under no-wind conditions.


use_ug_for_galilei_tr:
  category: Mode
  type: L
  default:
    value: .T.
  description:
    short:  Switch to determine the translation velocity in case that a Galilean transformation is used.
    long: |
      In case of a Galilean transformation (see [galilei_transformation](#initialization_parameters--galilei_transformation)), [use_ug_for_galilei_tr](#initialization_parameters--use_ug_for_galilei_tr) = *.T.* ensures that the coordinate system is translated with the geostrophic wind speed.

      Alternatively, [use_ug_for_galilei_tr](#initialization_parameters--use_ug_for_galilei_tr) = *.F.* replaces the geostrophic wind as translation speed by the (volume) averaged velocity. However, in this case, fast growing gravity waves may develop, so this choice is usually not recommended.


use_subsidence_tendencies:
  category: Mode
  type: L
  default:
    value: .F.
  description:
    short: This parameter determines how the large-scale subsidence is computed for runs with large-scale forcing.
    long: |
      If [use_subsidence_tendencies](#initialization_parameters--use_subsidence_tendencies) = *.F.*, the large-scale subsidence velocity $w_{subs}$ is used to advect the prognostic variables (subroutine `subsidence`). If [use_subsidence_tendencies](#initialization_parameters--use_subsidence_tendencies) = *.T.*, the subroutine `subsidence` is not called and the subsidence tendencies from [LSF_DATA](https://palm.muk.uni-hannover.de/trac/wiki/doc/app/iofiles#LSF_DATA) are applied to the prognostic variables in the subroutine `ls_advec`. The usage of [use_subsidence_tendencies](#initialization_parameters--use_subsidence_tendencies) requires [large_scale_forcing](#initialization_parameters--large_scale_forcing) = *.T.* as well as [large_scale_subsidence](#initialization_parameters--large_scale_subsidence) = *.T.*.


use_surface_fluxes:
  category: Boundary Conditions
  type: L
  default:
    value: .F.
  description:
    short: Parameter to steer the treatment of the subgrid-scale vertical fluxes within the diffusion terms at `k = 1` (bottom boundary).
    long: |
      By default, the near-surface subgrid-scale fluxes are parameterized (like in the remaining model domain) using a gradient approach. In case of [use_surface_fluxes](#initialization_parameters--use_surface_fluxes) = *.T.*, the SGS-fluxes are calculated via Monin-Obukhov similarity theory (depends on the bottom boundary conditions, see [bc_pt_b](#initialization_parameters--bc_pt_b), [bc_q_b](#initialization_parameters--bc_q_b) and [bc_s_b](#initialization_parameters--bc_s_b)), or user-assigned surface fluxes are used instead (see [surface_heatflux](#initialization_parameters--surface_heatflux), [surface_waterflux](#initialization_parameters _parameters--surface_waterflux) and [surface_scalarflux](#initialization_parameters--surface_scalarflux)).

      [use_surface_fluxes](#initialization_parameters--use_surface_fluxes) is automatically set *.T.*, if a constant flux layer is used (see [constant_flux_layer](#initialization_parameters--constant_flux_layer)).


use_top_fluxes:
  category: Boundary Conditions
  type: L
  default:
    value: .F.
  description:
    short:  Parameter to steer the treatment of the subgrid-scale vertical fluxes within the diffusion terms at `k = nz` (top boundary).
    long: |
      By default, the fluxes at grid level `nz` are calculated using the gradient approach. If [use_top_fluxes](#initialization_parameters--use_top_fluxes) = *.T.*, user-assigned fluxes are used instead (see [top_heatflux](#initialization_parameters--top_heatflux), [top_momentumflux_u](#initialization_parameters--top_momentumflux_u), [top_momentumflux_v](#initialization_parameters--top_momentumflux_v), [top_salinityflux](#initialization_parameters--top_salinityflux)).

      Currently, no value for the latent heatflux can be assigned. In case of [use_top_fluxes](#initialization_parameters--use_top_fluxes) = *.T.*, the latent heat flux at the top will be automatically set to zero.


use_upstream_for_tke:
  category: Numerics
  type: L
  default:
    value: .F.
  description:
    short: Parameter to choose the advection and time step scheme to be used for the subgrid-scale TKE.
    long: |
      By default, the advection scheme and the time step scheme to be used for the subgrid-scale TKE are set by the initialization parameters [scalar_advec](#initialization_parameters--scalar_advec) and [timestep_scheme](#initialization_parameters--timestep_scheme), respectively. [use_upstream_for_tke](#initialization_parameters--use_upstream_for_tke) = *.T.* forces the Euler-scheme and the upstream-scheme to be used as time step scheme and advection scheme. Using these schemes, strong artificial near-surface vertical gradients of the subgrid-scale TKE, as they are generated by some non-diffusive advection schemes, are avoided. [use_upstream_for_tke](#initialization_parameters--use_upstream_for_tke) = *.T.* is recommended when subgrid-scale velocities are considered for advection of particles (see [use_sgs_for_particles](#particle_parameters--use_sgs_for_particles)) and an advection scheme for scalars [scalar_advec](#initialization_parameters--scalar_advec) /= *'ws-scheme'* is used.


uv_heights:
  category: Initial Conditions
  shape: (200)
  type: R
  si-unit: m
  default:
    value: ~
  description:
    short: Height levels in ascending order, for which prescribed u,v-velocities ([u_profile](#initialization_parameters--u_profile), [v_profile](#initialization_parameters--v_profile)) are given.
    long: |
      The first height level must always be zero, i.e. [uv_heights](#initialization_parameters--uv_heights)(1) = *0.0*.


v_bulk:
  category: Mode
  type: R
  si-unit: m s^-1^
  default:
    value: 0.0
  description:
    short: v-component of predefined bulk velocity.
    long: |
      This parameter comes into effect if [conserve_volume_flow](#initialization_parameters--conserve_volume_flow) = *.T.* and [conserve_volume_flow_mode](#initialization_parameters--conserve_volume_flow_mode) = *'bulk_velocity'*.


v_profile:
  category: Initial Conditions
  shape: (200)
  type: R
  si-unit: m s^-1^
  default:
    value: ~
  description:
    short:  Values of v-velocity component to be used as initial profile.
    long: |
      The corresponding height levels have to be provided by parameter [uv_heights](#initialization_parameters--uv_heights). You need to give values for each of the height levels that are defined via [uv_heights](#initialization_parameters--uv_heights). The first velocity value always has to be assigned to the surface and must be zero, i.e. [v_profile](#initialization_parameters--v_profile)(1) = *0.0*. Velocity values at the model grid levels are calculated from the given values/heights by linear interpolation. If the uppermost value is given for a height smaller than the domain height, this value will be used for all grid points above this level. In runs with non-cyclic horizontal boundary conditions this profile will be used as fixed mean inflow profile.

      **Note:**
      Simultaneous use of forcing by geostrophic wind is not allowed, since this could lead to inconsistencies in the flow forcing. Hence, [omega](#initialization_parameters--omega) = *0.0* must be set when using [u_profile](#initialization_parameters--u_profile) and [v_profile](#initialization_parameters--v_profile). The latter flow forcing is typically used for simulating wind-tunnel applications (where the effect of Coriolis force is negligible) in order to fairly reproduce the measured wind-tunnel profiles within the LES.


vdi_checks:
  category: Others
  type: L
  default:
    value: .F.
  description:
    short: To switch on the internal controls according to VDI 3873 Part 9.
    long: |
      For more information see the [PALM VDI evaluation report](https://palm.muk.uni-hannover.de/trac/wiki/doc/tec/evaluation).


vg_surface:
  category: Initial Conditions
  type: R
  si-unit: m s^-1^
  default:
    value: 0.0
  description:
    short: v-component of the geostrophic wind at the surface.
    long: |
      This parameter assigns the value of the v-component of the geostrophic wind (`vg`) at the surface (`k=0`). Starting from this value, the initial vertical profile of the v-component of the geostrophic wind is constructed with [vg_vertical_gradient](#initialization_parameters--vg_vertical_gradient) and [vg_vertical_gradient_level](#initialization_parameters--vg_vertical_gradient_level). The profile constructed in that way is used for creating the vertical initial velocity profile of the 3d-model. Either it is applied, as it has been specified by the user ([initializing_actions](#initialization_parameters--initializing_actions) = *'set_constant_profiles'* ) or it is used for calculating a stationary boundary layer wind profile ([initializing_actions](#initialization_parameters--initializing_actions) = *'set_1d-model_profiles'* ).

      In case of a flat surface and cyclic horizontal boundary conditions, and if `vg` is constant with height (i.e. `vg(:)` = [vg_surface](#initialization_parameters--vg_surface)), one may use a Galilei-transformation of the coordinate system to allow for larger time steps (see [galilei_transformation](#initialization_parameters--galilei_transformation)), in order to spare computational resources.

      **Note:**
      In case of ocean mode runs, this parameter gives the v-component of the geostrophic velocity value (i.e. the pressure gradient) at the sea surface, which is at `k=nzt`. The profile is then constructed from the surface down to the bottom of the model.

      **Attention:**
      If the Coriolis force is switched off via [omega](#initialization_parameters--omega) = *0.0*, [vg_surface](#initialization_parameters--vg_surface) is still used for creating the initial wind profile, but of course it can't be called the profile of the geostrophic wind any more!


vg_vertical_gradient:
  category: Initial Conditions
  shape: (10)
  type: R
  si-unit: m s^-1^ / 100 m
  default:
    value: 0.0
  description:
    short: Vertical gradient(s) of the initial profile of the v-component of the geostrophic wind.
    long: |
      The gradient holds starting from the height level defined by [vg_vertical_gradient_level](#initialization_parameters--vg_vertical_gradient_level) (precisely: for all `uv` levels `k` where `zu(k)` > [vg_vertical_gradient_level](#initialization_parameters--vg_vertical_gradient_level), `vg(k)` is set: `vg(k) = vg(k-1) + dzu(k) *` [vg_vertical_gradient](#initialization_parameters--vg_vertical_gradient)) up to the top boundary or up to the next height level defined by [vg_vertical_gradient_level](#initialization_parameters--vg_vertical_gradient_level). A total of 10 different gradients for 11 height intervals can be assigned (10 intervals if [vg_vertical_gradient_level](#initialization_parameters--vg_vertical_gradient_level)(1) = *0.0*). The surface geostrophic wind is assigned by [vg_surface](#initialization_parameters--vg_surface).

      **Note:**
      In case of ocean mode runs, the profile is constructed like described above, but starting from the sea surface (`k=nzt`) down to the bottom boundary of the model. Height levels have then to be given as negative values, e.g. [vg_vertical_gradient_level](#initialization_parameters--vg_vertical_gradient_level) = *-500.0*, *-1000.0*.


vg_vertical_gradient_level:
  category: Initial Conditions
  shape: (10)
  type: R
  si-unit: m
  default:
    value: 0.0
    depends_on: ~
    value_of: ~
  description:
    short: Height level from which on the gradient defined by [vg_vertical_gradient](#initialization_parameters--vg_vertical_gradient) is effective.
    long: |
      The height levels have to be assigned in ascending order. For the piecewise construction of a profile of the v-component of the geostrophic wind $v_g$ see [vg_vertical_gradient](#initialization_parameters--vg_vertical_gradient).

      **Note:**
      In case of ocean mode runs, the (negative) height levels have to be assigned in descending order.


wall_adjustment:
  category: Surface Layer Properties
  type: L
  default:
    value: .T.
  description:
    short: Parameter to restrict the mixing length in the vicinity of the bottom boundary as well as near vertical walls of a non-flat topography.
    long: |
      [wall_adjustment](#initialization_parameters--wall_adjustment) = *.T.* limits the mixing length to a maximum of 1.8 * `z`. This condition typically affects only the first grid level above the bottom boundary or near walls.

      In case of walls (non-flat topography), the respective horizontal distance from vertical walls is used instead of `z`.

wall_heatflux:
  category: Topography
  shape: (6)
  type: R
  si-unit: K m s^-1^
  default:
    value: 0.0
  description:
    short: Prescribed kinematic sensible heat flux at the six topography faces.
    long: |
      The flux at the respective faces can be assigned as follows:

      |[wall_heatflux](#initialization_parameters--wall_heatflux) index  | face orientation |
      |:-----------|:--------------|
      |[wall_heatflux](#initialization_parameters--wall_heatflux)(0) |upward facing    |
      |[wall_heatflux](#initialization_parameters--wall_heatflux)(1) |westward facing  |
      |[wall_heatflux](#initialization_parameters--wall_heatflux)(2) |eastward facing  |
      |[wall_heatflux](#initialization_parameters--wall_heatflux)(3) |southward facing |
      |[wall_heatflux](#initialization_parameters--wall_heatflux)(4) |northward facing |
      |[wall_heatflux](#initialization_parameters--wall_heatflux)(5) |downward facing  |

      This parameter applies only in case of a non-flat topography. Prescribing [wall_heatflux](#initialization_parameters--wall_heatflux) additionally requires setting of [surface_heatflux](#initialization_parameters--surface_heatflux). Furthermore, please note that [wall_heatflux](#initialization_parameters--wall_heatflux)(0) only describes the kinematic flux for upward facing surfaces at non-zero heights, because only those surfaces are assumed to represent walls. At zero-height (bottom surface of the model) the kinematic flux is given by [surface_heatflux](#initialization_parameters--surface_heatflux) instead.

      The parameter [random_heatflux](#initialization_parameters--random_heatflux) can be used to impose random perturbations on the internal surface heat flux array `surf%shf` that holds values given by [surface_heatflux](#initialization_parameters--surface_heatflux) (at the bottom surface of the model) and [wall_heatflux](#initialization_parameters--wall_heatflux)(0) (at the topography/wall top face).

      [wall_heatflux](#initialization_parameters--wall_heatflux) is allowed to be set as runtime parameter as well. In case of a restart run, it then overwrites the setting from the previous run and the new values will be used for further restarts, as long as no new setting via the runtime parameter namelist is made.


wall_humidityflux:
  category: Topography
  shape: (6)
  type: R
  si-unit: m s^-1^
  default:
    value: 0.0
  description:
    short: Prescribed kinematic humidity flux at the six topography faces.
    long: |
      The flux at the respective faces can be assigned as follows:

      |[wall_humidityflux](#initialization_parameters--wall_humidityflux) index  | face orientation |
      |:-----------|:--------------|
      |[wall_humidityflux](#initialization_parameters--wall_humidityflux)(0) |upward facing    |
      |[wall_humidityflux](#initialization_parameters--wall_humidityflux)(1) |westward facing  |
      |[wall_humidityflux](#initialization_parameters--wall_humidityflux)(2) |eastward facing  |
      |[wall_humidityflux](#initialization_parameters--wall_humidityflux)(3) |southward facing |
      |[wall_humidityflux](#initialization_parameters--wall_humidityflux)(4) |northward facing |
      |[wall_humidityflux](#initialization_parameters--wall_humidityflux)(5) |downward facing  |

      This parameter applies only in case of a non-flat topography and [humidity](#initialization_parameters--humidity) = *.T.*. Prescribing [wall_humidityflux](#initialization_parameters--wall_humidityflux) additionally requires setting of [surface_waterflux](#initialization_parameters--surface_waterflux). Furthermore, please note that wall_humidityflux(0) only describes the kinematic flux for upward facing surfaces at non-zero height, because only those surfaces are assumed to represent walls. At zero-height (bottom surface of the model) the kinematic flux is given by [surface_waterflux](#initialization_parameters-surface_waterflux) instead.


wall_scalarflux:
  category: Topography
  shape: (6)
  type: R
  si-unit:  kg m^-2^ s^-1^ (particle flux) or ppm m s^-1^ (gaseous flux)
  default:
    value: 0.0
  description:
    short: Prescribed scalar flux at the six topography faces.
    long: |
      The flux at the respective faces can be assigned as follows:

      |[wall_scalarflux](#initialization_parameters--wall_humidityflux) index  | face orientation |
      |:-----------|:--------------|
      |[wall_scalarflux](#initialization_parameters--wall_scalarflux)(0) |upward facing    |
      |[wall_scalarflux](#initialization_parameters--wall_scalarflux)(1) |westward facing  |
      |[wall_scalarflux](#initialization_parameters--wall_scalarflux)(2) |eastward facing  |
      |[wall_scalarflux](#initialization_parameters--wall_scalarflux)(3) |southward facing |
      |[wall_scalarflux](#initialization_parameters--wall_scalarflux)(4) |northward facing |
      |[wall_scalarflux](#initialization_parameters--wall_scalarflux)(5) |downward facing  |

      This parameter applies only in case of a non-flat topography and [passive_scalar](#initialization_parameters--passive_scalar) = *.T.*. Prescribing [wall_scalarflux](#initialization_parameters--wall_scalarflux) additionally requires setting of [surface_scalarflux](#initialization_parameters--surface_scalarflux). Furthermore, please note that wall_scalarflux(0) only describes the kinematic flux for upward facing surfaces at non-zero height, because only those surfaces are assumed to represent walls. At zero-height (bottom surface of the model) the kinematic flux is given by [surface_scalarflux](#initialization_parameters--surface_scalarflux) instead.


y_shift:
  category: Boundary Conditions
  type: I
  default:
    value: 0
  description:
    short: Shift of boundary values at the inflow in y-direction to prevent occurence of persistent streaklike structures oriented along x-direction.
    long: |
      This feature alleviates the occurrence of persistent streaklike structures that can appear during simulations with neutral stratification and insufficient long model domain in streamwise direction when using lateral cyclic boundary conditions, or an insufficient long recycling width when using non-cyclic boundary conditions together with the turbulence recycling method. For a description of these structures, see [Munters (2016)](https://www.dx.doi.org/10.1063/1.4941912). This method is only implemented for a mean flow in positive x-direction.

      To prevent these structures in case of lateral cyclic boundary conditions
      ([bc_lr](#initialization_parameters--bc_lr) = *'cyclic'*, [bc_ns](#initialization_parameters--bc_ns) = *'cyclic'*)  [psolver](#initialization_parameters--psolver) = 'multigrid' is required.

      The method shifts the values of all prognostic quantities at the left boundary by multiples (number of multiples given by [y_shift](#initialization_parameters--y_shift)) of a subdomain size along y. The shift is such that a point (at coordinate `y = yr`) on the right domain boundary no longer corresponds with the point with the same y-coordinate on the left boundary, but instead with the point with the coordinate y = yr + [y_shift](#initialization_parameters--y_shift) * ([ny](#initialization_parameters--ny) + 1 ) / [npey](#initialization_parameters--npey). Conversely, a point on the left boundary with coordinate `y = yl` corresponds with the point on the right boundary with the coordinate y = yl - [y_shift](#initialization_parameters--y_shift) * ([ny](#initialization_parameters--ny)+1) / [npey](#initialization_parameters--npey).
      Negative values and also those that exceed [npey](#initialization_parameters--npey) are allowed. They are mapped to the range [0,[npey](#initialization_parameters--npey)-1] internally.

      The following figure shows a scetch for [npex](#initialization_parameters--npex) = [npey](#initialization_parameters--npey) = *5* and [y_shift](#initialization_parameters--y_shift) = *1*:
      ![](y_shift_pic.png){ align=center }

      In case of using non-cyclic boundary conditions along x-direction ([bc_lr](#initialization_parameters--bc_lr) = *'dirichlet/radiation'*) together with the turbulence recycling method ([turbulent_inflow_method](#turbulent_inflow_parameters--turbulent_inflow_method) = *'recycle_...'*) the principal method is the same as explained above, except that the right boundary corresponds here to the position of the turbulence recycling plane.

zeta_max:
  category: Surface Layer Properties
  type: R
  default:
    value: 20.0
  description:
    short: Upper limit of the flux Richardson Number.
    long: |
      Upper limit of the stability parameter $\zeta= z_{mo} / L$ with $z_{mo}$ the height of the constant flux layer and $L$ the Obukhov length.

      With a constant flux layer switched on (see [constant_flux_layer](#initialization_parameters--constant_flux_layer)), the Obukhov length $L$ is calculated for $z = z_{mo}$ in the 3d-model (in the 1d-model for all heights) for each horizontal grid point. Its particular values determine the values of the friction velocity (1d- and 3d-model) and the values of the eddy diffusivity (1d-model). With small wind velocities at the top of the constant flux layer or small vertical wind shears in the 1d-model, the stability parameter $\zeta$ can take up unrealistic values. They are limited by an upper ([zeta_max](#initialization_parameters--zeta_max)) and lower limit (see [zeta_min](#initialization_parameters--zeta_min)). The condition [zeta_max](#initialization_parameters--zeta_max) > [zeta_min](#initialization_parameters--zeta_min) must be met.


zeta_min:
  category: Surface Layer Properties
  type: R
  default:
    value: -20.0
  description:
    short: Lower limit of the flux Richardson Number.
    long: |
      Lower limit of the stability parameter $\zeta= z_{mo} / L$ with $z_{mo}$ the height of the constant flux layer and $L$ the Obukhov length.

      For further explanations see [zeta_max](#initialization_parameters--zeta_max). The condition [zeta_max](#initialization_parameters--zeta_max) > [zeta_min](#initialization_parameters--zeta_min) must be met.


z0h_factor:
  category: Surface Layer Properties
  type: R
  default:
    value: 1.0
  description:
    short: Factor for calculating the roughness length for scalars.
    long: |
      With this parameter the roughness length for scalars (potential temperature, humidity/scalar) can be defined with respect to that for momentum. The roughness length for scalars z0h is calculated as:

      z0h = [z0h_factor](#initialization_parameters--z0h_factor) * [roughness_length](#initialization_parameters--roughness_length).

      This parameter is effective only in case that a constant flux layer is switched on at the bottom boundary (see [constant_flux_layer](#initialization_parameters--constant_flux_layer)).
