#!/usr/bin/env bash
#--------------------------------------------------------------------------------#
# This file is part of the PALM model system.
#
# PALM is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# PALM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# PALM. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 1997-2021  Leibniz Universitaet Hannover
#--------------------------------------------------------------------------------#
# project install script
#--------------------------------------------------------------------------------#
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
   DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
   SOURCE="$(readlink "$SOURCE")"
   [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_LOCATION="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

project_root_dir=$(readlink -f "${SCRIPT_LOCATION}/")
project_build_dir=$(readlink -f "${project_root_dir}/build/")
project_share_dir=$(readlink -f "${project_root_dir}/share/")
project_src_dir=$(readlink -f "${project_root_dir}/src/")

install_prefix="${project_build_dir}"

program_name="palm_csd"

install_function() {
   printf "### %s\n" "Installing ${program_name} ..."
   install_bin_dir="${install_prefix}/bin"
   venv_dir="${install_prefix}/.palm_csd_venv"
   if [ "${do_clean}" == "true" ]; then
      rm -f "${install_bin_dir}/palm_csd"
      rm -rf "${venv_dir}"
   fi
   mkdir -p "${install_bin_dir}"
   chmod a+x $(realpath "${project_root_dir}/main.py")
   if [ "${venv}" == "true" ]; then

      # check if pip and the venv module is available
      pip="false"
      if [ -x "$(command -v pip)" ]; then
         python3 << EOF
import venv
EOF
         if [ $? -eq 0 ]; then pip="true"; fi
      fi
      # check if conda is available
      python3 << EOF
import sys, os
if os.path.exists(os.path.join(sys.base_prefix, 'conda-meta')):
    sys.exit(1)
sys.exit(0)
EOF
      if [ $? -eq 1 ]; then conda="true"; else conda="false"; fi

      if [ "${conda}" == "true" ]; then
         # conda virtual environment
         if [ ! -d "${venv_dir}" ]; then
            echo "Creating conda virtual environment" "${venv_dir}"
            conda create -y --prefix "${venv_dir}"
            if [ $? -ne 0 ]; then 
               echo "Failed to create conda virtual environment" "${venv_dir}"
               echo "Exiting ..."
               exit 1 
            fi
         else
            echo "Using conda virtual environment" "${venv_dir}"
         fi
            conda install -y --file "${project_root_dir}/requirements.txt" -p "${venv_dir}"
            cat << EOF > "${install_bin_dir}/palm_csd"
#!/usr/bin/env bash
conda run --no-capture-output -p "${venv_dir}" "${project_root_dir}/main.py" "\$@"
EOF
         chmod a+x "${install_bin_dir}/palm_csd"

      elif [ "${pip}" == "true" ]; then
         # venv and pip virtual environment
         if [ ! -d "${venv_dir}" ]; then
            echo "Creating venv virtual environment"
            python3 -m venv "${venv_dir}"
            if [ $? -ne 0 ]; then 
               echo "Failed to create venv virtual environment" "${venv_dir}"
               echo "Exiting ..."
               exit 1 
            fi
            echo "Created virtual environment" "${venv_dir}"
         else
            echo "Using venv virtual environment" "${venv_dir}"
         fi
         source "${venv_dir}/bin/activate"
         if [ $? -ne 0 ]; then 
            echo "Failed to activate venv virtual environment" "${venv_dir}"
            echo "Exiting ..."
            exit 1 
            fi
         pip install --upgrade pip
         pip install -r "${project_root_dir}/requirements.txt"
         deactivate
         cat << EOF > "${install_bin_dir}/palm_csd"
#!/usr/bin/env bash
source "${venv_dir}/bin/activate"
"${project_root_dir}/main.py" "\$@"
deactivate
EOF
         chmod a+x "${install_bin_dir}/palm_csd"
      else
         echo "Neither pip with the venv module nor conda is available. Please install one of them."
         exit 1
      fi
   else
      ln -s -f $(realpath --relative-to="${install_bin_dir}" "${project_root_dir}/main.py") "${install_bin_dir}/palm_csd"
   fi
   printf "### %s\n" "Installing ${program_name} finished."
}

show_usage() {
   echo "Usage: $0 [-h] [-e] [-p <install_prefix>] [-x]"
}

show_help() {
   show_usage
   echo "      -h                     show this help message"
   echo "      -e                     use a virtual environment and install dependencies"
   echo "      -p <install_prefix>    set installation directory"
   echo "      -x                     clean already existing build files"
}

venv="false"
while getopts ":p:ehx" o; do
   case "${o}" in
      p)
         install_prefix="$(readlink -m "${OPTARG}")"
         ;;
      e)
         venv="true"
         ;;
      x)
         do_clean="true"
         ;;
      h)
         show_help
         exit 0
         ;;
      *)
         show_usage
         exit 1
         ;;
   esac
done
# strip all parsed options from the options list
shift $((OPTIND-1))

install_function
