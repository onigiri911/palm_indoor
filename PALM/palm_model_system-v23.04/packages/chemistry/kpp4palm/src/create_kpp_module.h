#ifndef mecca
#define mecca 1
//
// ############################################################################
//
//     create_mz_kpp_module
//
//     create scalar code from .f90 sources created by KPP to be used in MESSy
//
//     COPYRIGHT Klaus Ketelsen and MPI-CH   April 2007
//
// ############################################################################
//
//Current revisions:
//------------------
//
//
// Former revisions:
// -----------------------
// Deleted $Id since document_changes does not work for C and C++         (15.03.2019, forkel)
//
// Added create_set_cs   (22.02.2019, forkel)
//
// Removed create_fill_routine   (18.09.2018, ketelsen)
//
// initial version                                  (Nov. 2016, ketelsen)
//

#include <iostream>
#include <fstream>

#include <string>
#include <list>
#include <vector>

#include "fortran_file.h"
#include "expand_decomp.h"

// Class to create module which contains code generated by kpp.

class create_kpp_module {

  vector <fortran_file>         kpp_files;
  vector <fortran_file>         kpp_subroutines;
  vector <fortran_file>         kpp_includes;
  vector <fortran_file>         e5_subroutines;
  fortran_file                  mz_kpp;
  fortran_file                  e5_kpp;
  fortran_file                  header_variables;
  string                        prefix;
  string                        module_name;
  vector<string>                global_variable_list;
  vector<string>                species_list;
  vector<string>                interface_ignore;
  vector<Vvar>                  Vvar_list;


  void create_fortran_files_and_read();
  void copy_files_to_subroutines();
  void add_solver_to_subroutine_list();
  void generate_module_header();
  void write_module_file();

  void create_kpp_integrate();
  void create_set_cs();

public:

  void do_work (string s) ;

  create_kpp_module () {
    global_variable_list.push_back("C");
    global_variable_list.push_back("VAR");
    global_variable_list.push_back("FIX");
    global_variable_list.push_back("A");
    global_variable_list.push_back("RCONST");
  }
};

#endif
