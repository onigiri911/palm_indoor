#!/usr/bin/env bash
#--------------------------------------------------------------------------------#
# This file is part of the PALM model system.
#
# PALM is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# PALM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# PALM. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 1997-2021  Leibniz Universitaet Hannover
#--------------------------------------------------------------------------------#
# project install script
#--------------------------------------------------------------------------------#

# on macOS, use GNU readlink instead of the system BSD version, can be installed
# via Homebrew: 'brew install coreutils'
READLINK_CMD="readlink"
if [[ "$OSTYPE" == "darwin"* ]]; then
   READLINK_CMD="greadlink"
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
   DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
   SOURCE="$(${READLINK_CMD} "$SOURCE")"
   [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_LOCATION="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

project_root_dir=$(${READLINK_CMD} -f "${SCRIPT_LOCATION}/")
project_bin_dir=$(${READLINK_CMD} -f "${project_root_dir}/bin/")
project_build_dir=$(${READLINK_CMD} -f "${project_root_dir}/build/")
project_share_dir=$(${READLINK_CMD} -f "${project_root_dir}/share/")
project_src_dir=$(${READLINK_CMD} -f "${project_root_dir}/src/")
project_tests_dir=$(${READLINK_CMD} -f "${project_root_dir}/tests/")

install_prefix="${project_build_dir}"

program_name="INIFOR"
prog="inifor"

if command -v nf-config &> /dev/null
then
    fortran_compiler="$(nf-config --fc)"
elif command -v nc-config &> /dev/null
then
    fortran_compiler="$(nc-config --fc)"
fi

install_function() {
   printf "### %s\n" "Installing ${program_name} ..."
   if [ "${do_clean}" == "true" ]; then
      rm -r ${project_build_dir}
   fi
   mkdir -p ${project_build_dir}
   # create Makefile from template using cmake
   local cmake_tmp_dir=${project_build_dir}/.cmake.tmp
   mkdir -p ${cmake_tmp_dir}
   cd ${cmake_tmp_dir}
   cp ${project_share_dir}/cmake/CMakeLists.txt ${cmake_tmp_dir}/
   cmake -Wno-dev \
         ${fortran_compiler:+-DCMAKE_Fortran_COMPILER=}${fortran_compiler} \
         ${netcdf_c_prefix:+-DNETCDF_C_ROOT=}${netcdf_c_prefix} \
         ${netcdf_fortran_prefix:+-DNETCDF_FORTRAN_ROOT=}${netcdf_fortran_prefix} \
         -DCMAKE_BUILD_TYPE=Release \
         -DINIFOR_CMAKE_PATH=${project_share_dir}/cmake \
         -DINIFOR_MAKEFILE_TEMPLATE=${project_share_dir}/cmake/Makefile.in \
         ${project_build_dir:+-DCMAKE_INSTALL_PREFIX=}${project_build_dir} \
         ${cmake_tmp_dir}
   cd ${project_build_dir}
   rm -r ${cmake_tmp_dir}
   cp -p ${project_src_dir}/*.f90  ${project_build_dir}/
   cp -p ${project_tests_dir}/*.f90  ${project_build_dir}/
   make -j
   install_bin_dir=${install_prefix}/bin
   mkdir -p ${install_bin_dir}
   cp ${project_build_dir}/${prog} ${install_bin_dir}/
   mkdir -p ${install_prefix}
   cd ${install_prefix}
   printf "### %s\n" "Installing ${program_name} finished."
}

show_usage() {
   echo "Usage: $0 [-h] [-p <install_prefix>] [-c <compiler>] [-s <path>] [-t <path>] [-x]"
}

show_help() {
   show_usage
   echo "      -h                     show this help message"
   echo "      -p <install_prefix>    set installation directory"
   echo "      -c <compiler>          set desired compiler"
   echo "      -s <path>              set existing netCDF-C library installation prefix (helps to find library)"
   echo "      -t <path>              set existing netCDF-Fortran library installation prefix (helps to find library)"
   echo "      -x                     clean already existing build files"
}

while getopts ":p:c:s:t:hx" o; do
   case "${o}" in
      p)
         install_prefix="$(${READLINK_CMD} -m "${OPTARG}")"
         ;;
      c)
         fortran_compiler="${OPTARG}"
         ;;
      s)
         netcdf_c_prefix="$(${READLINK_CMD} -e "${OPTARG}")"
         ;;
      t)
         netcdf_fortran_prefix="$(${READLINK_CMD} -e "${OPTARG}")"
         ;;
      x)
         do_clean="true"
         ;;
      h)
         show_help
         exit 0
         ;;
      *)
         show_usage
         exit 1
         ;;
   esac
done
# strip all parsed options from the options list
shift $((OPTIND-1))

install_function
